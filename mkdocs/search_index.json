{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome!\n\n\nDeskPRO React SDK is a library for connecting \nReact\n components to the DeskPRO API.\n\n\nA Simple App\n\n\nThe SDK automatically passes DeskPRO props to your components, like the \ntabData\n prop which contains details about an open ticket.\n\n\nimport React from 'react';\n\nconst App = ({ tabData }) =\n (\n  \nul\n\n    {tabData.participants.map(({ person }) =\n (\n      \nli key={person.id}\n\n        \nimg src={person.default_picture_url} /\n\n        \ndiv\n\n          {person.name}\n        \n/div\n\n        \ndiv\n\n          {person.primary_email.email}\n        \n/div\n\n      \n/li\n\n    ))}\n  \n/ul\n\n);\n\nexport default App;\n\n\n\n\n\n\nTutorials\n\n\nBasic\n\n\nA tutorial that walks you through creating a simple DeskPRO app which displays a list of people participating in a ticket.\n\n\nForm Handling\n\n\nA tutorial that walks you through creating a DeskPRO app which has two pages. One page with a settings form and one page which displays the form values.\n\n\nUsing OAuth\n\n\nA tutorial that walks you through creating a DeskPRO app which uses oauth to authenticate with a remote service provider.\n\n\nUsing Redux\n\n\nA tutorial that walks advanced developers through using Redux with the SDK.", 
            "title": "Overview"
        }, 
        {
            "location": "/#welcome", 
            "text": "DeskPRO React SDK is a library for connecting  React  components to the DeskPRO API.", 
            "title": "Welcome!"
        }, 
        {
            "location": "/#a-simple-app", 
            "text": "The SDK automatically passes DeskPRO props to your components, like the  tabData  prop which contains details about an open ticket.  import React from 'react';\n\nconst App = ({ tabData }) =  (\n   ul \n    {tabData.participants.map(({ person }) =  (\n       li key={person.id} \n         img src={person.default_picture_url} / \n         div \n          {person.name}\n         /div \n         div \n          {person.primary_email.email}\n         /div \n       /li \n    ))}\n   /ul \n);\n\nexport default App;", 
            "title": "A Simple App"
        }, 
        {
            "location": "/#tutorials", 
            "text": "", 
            "title": "Tutorials"
        }, 
        {
            "location": "/#basic", 
            "text": "A tutorial that walks you through creating a simple DeskPRO app which displays a list of people participating in a ticket.", 
            "title": "Basic"
        }, 
        {
            "location": "/#form-handling", 
            "text": "A tutorial that walks you through creating a DeskPRO app which has two pages. One page with a settings form and one page which displays the form values.", 
            "title": "Form Handling"
        }, 
        {
            "location": "/#using-oauth", 
            "text": "A tutorial that walks you through creating a DeskPRO app which uses oauth to authenticate with a remote service provider.", 
            "title": "Using OAuth"
        }, 
        {
            "location": "/#using-redux", 
            "text": "A tutorial that walks advanced developers through using Redux with the SDK.", 
            "title": "Using Redux"
        }, 
        {
            "location": "/pages/manifest/", 
            "text": "Overview\n\n\nEvery DeskPRO app must include a manifest which contains app properties like the title, storage permissions, and interactions with external APIs. The manifest values may be added to the \npackage.json\n file or a separate \nmanifest.json\n file.\n\n\nmanifest.json\n\n\nThe \nmanifest.json\n must be saved to the app root directory, and should include the following properties.\n\n\n{\n    \nversion\n: \n2.1.0\n,\n    \nappVersion\n: \n1.0.0\n,\n    \nname\n: \nApp\n,\n    \ntitle\n: \nApp Title\n,\n    \ndescription\n: \nApp description.\n,\n    \nurl\n: \nhttps://github.com/user/app\n,\n    \nauthor\n: {\n        \nname\n: \nAuthor Name\n,\n        \nemail\n: \nauthor@app.com\n,\n        \nurl\n: \nhttps://github.com/user\n\n    },\n    \nisSingle\n: true,\n    \nscope\n: \nagent\n,\n    \nstorage\n: [\n      {\n        \nname\n: \nsettings\n,\n        \nisBackendOnly\n: false,\n        \npermRead\n: \nEVERYBODY\n,\n        \npermWrite\n: \nOWNER\n\n      }\n    ],\n    \ntargets\n: [\n      {\n        \ntarget\n: \nticket-sidebar\n,\n        \nurl\n: \nhtml/index.html\n\n      }\n    ],\n    \nsettings\n: [],\n    \ndeskproApiTags\n: [],\n    \nexternalApis\n: []\n}\n\n\n\n\nversion\n\n\nThis is the version of the manifest you are using.\n\n\ntitle\n\n\nThe title of your application which your users will see.\n\n\nisSingle\n\n\nA boolean flag which determines if the application can be installed multiple times. For now keep this flag to true.\n\n\nscope\n\n\nOption which determines which DeskPRO module is the target of the application. For now only agent is supported which means your apps will appear only in the agent interface.\n\n\ntargets\n\n\nThis is a list of objects defining which HTML file renders the app, and where it be displayed in the agent interface. It may help to think of the main helpdesk as a template with a predefined set of placeholders which can be filled by the app UI.\n\n\nA target definition is an object with two properties:\n\n\n\n\n\n\ntarget\n - One of the DeskPRO predefined targets\n\n\n\n\n\n\nurl\n - The path to the app HTML file relative to the app root directory\n\n\n\n\n\n\nstorage\n\n\nThis is a white list of storage objects, which define who can access the app storage values. See the \nstorage documentation\n for more information.\n\n\nA storage object has the following properties:\n\n\n\n\n\n\nname\n - This is the name of your storage variable\n\n\n\n\n\n\nisBackendOnly\n - This is a flag which control which systems can access your storage variable. If it is false, then your storage variable will be available everywhere. If it is true the variable will only be available to the internal system and it will never be exposed to the outside world\n\n\n\n\n\n\npermRead\n - This option establishes who can read the variable. There are only to values, OWNER and EVERYBODY. OWNER means only the user who created the variable can read, and EVERYBODY means reading is un-restricted\n\n\n\n\n\n\npermWrite\n - This option establishes who can update or delete the variable. There are only to values, OWNER and EVERYBODY. OWNER means only the user who created the variable can write, and EVERYBODY means writing is un-restricted\n\n\n\n\n\n\nexternalApis\n\n\nThis is a white list of url patterns which is used to control which third party API\u2019s your application can access. If you need to an external api, and chances are that you will, make sure it is on this list.\n\n\ndeskproApiTags\n\n\nKeep this as an empty list for now\n\n\nsettings\n\n\nKeep this as an empty list for now.\n\n\n\n\npackage.json\n\n\nThe configuration may be added to the \npackage.json\n file instead of having a separate \nmanifest.json\n. The configuration values must be placed inside the \"deskpro\" property.\n\n\n{\n  \nname\n: \ndeskpro-app\n,\n  \nversion\n: \n1.0.0\n,\n  \ndescription\n: \nApp description.\n,\n  \ndeskpro\n: {\n    \nversion\n: \n2.1.0\n,\n    \ntitle\n: \nApp Title\n,\n    \nisSingle\n: true,\n    \nscope\n: \nagent\n,\n    \nstorage\n: [\n      {\n        \nname\n: \nsettings\n,\n        \nisBackendOnly\n: false,\n        \npermRead\n: \nEVERYBODY\n,\n        \npermWrite\n: \nOWNER\n\n      }\n    ],\n    \ntargets\n: [\n      {\n        \ntarget\n: \nticket-sidebar\n,\n        \nurl\n: \nhtml/index.html\n\n      }\n    ],\n    \nsettings\n: [],\n    \ndeskproApiTags\n: [],\n    \nexternalApis\n: []\n  },\n  \ndependencies\n: {\n    \n@deskproapps/deskproapps-sdk-core\n: \n^1.0.0\n,\n    \ndeskpro-sdk-react\n: \n^1.0.0\n,\n    \ndeskpro-components\n: \n^1.0.0\n\n  }\n}\n\n\n\n\nThe \"appVersion\", \"name\", \"description\", and \"author\" values may be omitted from the \"deskpro\" configuration, as they can be determined by reading the rest of the \npackage.json\n file.", 
            "title": "Manifest"
        }, 
        {
            "location": "/pages/manifest/#overview", 
            "text": "Every DeskPRO app must include a manifest which contains app properties like the title, storage permissions, and interactions with external APIs. The manifest values may be added to the  package.json  file or a separate  manifest.json  file.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/manifest/#manifestjson", 
            "text": "The  manifest.json  must be saved to the app root directory, and should include the following properties.  {\n     version :  2.1.0 ,\n     appVersion :  1.0.0 ,\n     name :  App ,\n     title :  App Title ,\n     description :  App description. ,\n     url :  https://github.com/user/app ,\n     author : {\n         name :  Author Name ,\n         email :  author@app.com ,\n         url :  https://github.com/user \n    },\n     isSingle : true,\n     scope :  agent ,\n     storage : [\n      {\n         name :  settings ,\n         isBackendOnly : false,\n         permRead :  EVERYBODY ,\n         permWrite :  OWNER \n      }\n    ],\n     targets : [\n      {\n         target :  ticket-sidebar ,\n         url :  html/index.html \n      }\n    ],\n     settings : [],\n     deskproApiTags : [],\n     externalApis : []\n}", 
            "title": "manifest.json"
        }, 
        {
            "location": "/pages/manifest/#version", 
            "text": "This is the version of the manifest you are using.", 
            "title": "version"
        }, 
        {
            "location": "/pages/manifest/#title", 
            "text": "The title of your application which your users will see.", 
            "title": "title"
        }, 
        {
            "location": "/pages/manifest/#issingle", 
            "text": "A boolean flag which determines if the application can be installed multiple times. For now keep this flag to true.", 
            "title": "isSingle"
        }, 
        {
            "location": "/pages/manifest/#scope", 
            "text": "Option which determines which DeskPRO module is the target of the application. For now only agent is supported which means your apps will appear only in the agent interface.", 
            "title": "scope"
        }, 
        {
            "location": "/pages/manifest/#targets", 
            "text": "This is a list of objects defining which HTML file renders the app, and where it be displayed in the agent interface. It may help to think of the main helpdesk as a template with a predefined set of placeholders which can be filled by the app UI.  A target definition is an object with two properties:    target  - One of the DeskPRO predefined targets    url  - The path to the app HTML file relative to the app root directory", 
            "title": "targets"
        }, 
        {
            "location": "/pages/manifest/#storage", 
            "text": "This is a white list of storage objects, which define who can access the app storage values. See the  storage documentation  for more information.  A storage object has the following properties:    name  - This is the name of your storage variable    isBackendOnly  - This is a flag which control which systems can access your storage variable. If it is false, then your storage variable will be available everywhere. If it is true the variable will only be available to the internal system and it will never be exposed to the outside world    permRead  - This option establishes who can read the variable. There are only to values, OWNER and EVERYBODY. OWNER means only the user who created the variable can read, and EVERYBODY means reading is un-restricted    permWrite  - This option establishes who can update or delete the variable. There are only to values, OWNER and EVERYBODY. OWNER means only the user who created the variable can write, and EVERYBODY means writing is un-restricted", 
            "title": "storage"
        }, 
        {
            "location": "/pages/manifest/#externalapis", 
            "text": "This is a white list of url patterns which is used to control which third party API\u2019s your application can access. If you need to an external api, and chances are that you will, make sure it is on this list.", 
            "title": "externalApis"
        }, 
        {
            "location": "/pages/manifest/#deskproapitags", 
            "text": "Keep this as an empty list for now", 
            "title": "deskproApiTags"
        }, 
        {
            "location": "/pages/manifest/#settings", 
            "text": "Keep this as an empty list for now.", 
            "title": "settings"
        }, 
        {
            "location": "/pages/manifest/#packagejson", 
            "text": "The configuration may be added to the  package.json  file instead of having a separate  manifest.json . The configuration values must be placed inside the \"deskpro\" property.  {\n   name :  deskpro-app ,\n   version :  1.0.0 ,\n   description :  App description. ,\n   deskpro : {\n     version :  2.1.0 ,\n     title :  App Title ,\n     isSingle : true,\n     scope :  agent ,\n     storage : [\n      {\n         name :  settings ,\n         isBackendOnly : false,\n         permRead :  EVERYBODY ,\n         permWrite :  OWNER \n      }\n    ],\n     targets : [\n      {\n         target :  ticket-sidebar ,\n         url :  html/index.html \n      }\n    ],\n     settings : [],\n     deskproApiTags : [],\n     externalApis : []\n  },\n   dependencies : {\n     @deskproapps/deskproapps-sdk-core :  ^1.0.0 ,\n     deskpro-sdk-react :  ^1.0.0 ,\n     deskpro-components :  ^1.0.0 \n  }\n}  The \"appVersion\", \"name\", \"description\", and \"author\" values may be omitted from the \"deskpro\" configuration, as they can be determined by reading the rest of the  package.json  file.", 
            "title": "package.json"
        }, 
        {
            "location": "/pages/props/", 
            "text": "Overview\n\n\nThe SDK automatically passes a number of objects to your components via props. Some of the SDK props contain information about the running application and current context, and some provide methods to interact with DeskPRO. For instance the \nstorage\n prop which allows developers to persist values with the DeskPRO application, and the \nme\n prop which contains information about the person using the app.\n\n\nConnecting your components\n\n\nComponents which need access to the SDK props must be \nconnected\n to the SDK. The \nDeskproSDK component\n automatically connects the wrapped component.\n\n\nThe \nApp /\n component in the following example will have all SDK props passed to it because it's wrapped by the \nDeskproSDK\n component.\n\n\nReactDOM.render(\n    \nDeskproSDK dpapp={dpapp} store={store}\n\n      \nApp /\n\n    \n/DeskproSDK\n,\n    document.getElementById('deskpro-app')\n);\n\n\n\n\nOnly the app root component gets wrapped by \nDeskproSDK\n. The other components in your app will use the \nsdkConnect\n function to connect them to the SDK props. Its usage is optional, and is only required when a component needs access to the props.\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-react-sdk';\n\nclass PageSettings extends React.Component {\n    render() {\n        return (\n            \ndiv\n\n                {this.props.storage.app.country}\n            \n/div\n\n        );\n    }\n}\n\nexport default sdkConnect(PageSettings);\n\n\n\n\nThe function may be used as a decorator when \ndecorators are enabled\n.\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-react-sdk';\n\n@sdkConnect\nexport default class PageSettings extends React.Component {\n    render() {\n        return (\n            \ndiv\n\n                {this.props.storage.app.country}\n            \n/div\n\n        );\n    }\n}\n\n\n\n\nAdvanced usage\n\nReact SDK uses \nRedux\n internally to manage state. The same \nmapStateToProps\n and \nmapDispatchToProps\n functions \nsupported by React Redux\n may also be passed to the \nsdkConnect\n function.\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-react-sdk';\n\nclass PageSettings extends React.Component {\n    render() {\n        return (\n            \ndiv\n\n                {this.props.country}\n            \n/div\n\n        );\n    }\n}\n\nconst mapStateToProps(state) {\n    return {\n        country: state.sdk.storage.app.settings.country\n    };\n};\n\nexport default sdkConnect(PageSettings, mapStateToProps);\n\n\n\n\n\n\nStorage\n\n\nthis.props.storage\n\n\nAn object which reads and writes values to the DeskPRO database in order to persist them from one invocation of the app and another. Two mechanisms are provided for storing values. One for storing global \"app\" values, and one for attaching \"entity\" values to the currently opened ticket.\n\n\n\n\nNote\n\n\nSee the \nmanifest storage configuration\n for more information about declaring storage values and setting permissions.\n\n\n\n\nCall \nthis.props.storage.setApp()\n to persist global values which will be bound the app. For instance app settings or user information. The method takes an object of key/value pairs.\n\n\nthis.props.storage.setApp({ country: 'uk' });\n\n\n\n\nOnce the values have been saved the SDK will pass new props to the connected components with the new values. The app values can then be read from the \nthis.props.storage.app\n object.\n\n\nconst country = this.props.storage.app.country;\n\n\n\n\nThe following example renders a form with a list of countries. The component uses \nthis.props.storage\n to save the selected value.\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Form, Select, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageCountry extends React.Component {\n    /**\n     * Receives the submitted form values and saves them to\n     * app storage\n     */\n    handleSubmit = (values) =\n {\n        this.props.storage.setApp({ country: values.country });\n    };\n\n    /**\n     * @returns {XML}\n     */\n    render() {\n        const initialValues = {\n            country: this.props.storage.app.country\n        };\n        const options = [\n            { label: 'United Kingdom', value: 'uk' },\n            { label: 'United States', value: 'us' }\n        ];\n\n        return (\n            \nForm onSubmit={this.handleSubmit} initialValues={initialValues}\n\n                \nSelect\n                    label=\nCountry\n\n                    id=\ncountry\n\n                    name=\ncountry\n\n                    options={options}\n                /\n\n                \nButton\nSubmit\n/Button\n\n            \n/Form\n\n        );\n    }\n}\n\nexport default sdkConnect(PageCountry);\n\n\n\n\nCall \nthis.props.storage.setEntity()\n to attach values to the currently opened ticket. Unlike the global app values, entity values are unique to each ticket. The method takes an object of key/value pairs.\n\n\nthis.props.storage.setEntity({ note: '...' });\n\n\n\n\n\n\nNote\n\n\nUnder the hood the SDK saves the value using key \"note:{ticket_id}\". Which means the value of \"note\" is unique to the ticket being viewed.\n\n\n\n\nOnce the values have been saved they can be read from the \nthis.props.storage.entity\n object.\n\n\nconst note = this.props.storage.entity.note;\n\n\n\n\nThe following example allows agents to attach notes to the opened ticket. It shows the current notes with a form to create a new note.\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Form, Textarea, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass Notes extends React.Component {\n    /**\n     * Receives the submitted form values and saves them to\n     * app storage\n     */\n    handleSubmit = (values) =\n {\n        const { storage } = this.props;\n        const notes = storage.entity.notes;\n\n        // Clone the existing notes or create a new array if the ticket\n        // doesn't have any existing notes.\n        const newNotes = (notes || []).slice(0);\n        newNotes.push(values.note);\n\n        // Attach the notes to the open ticket. This will overwrite the\n        // existing value.\n        storage.setEntity({ notes: newNotes });\n    };\n\n    /**\n     * @returns {XML}\n     */\n    render() {\n        const { storage } = this.props;\n        const notes = storage.entity.notes;\n\n        return (\n            \ndiv\n\n                \nh1\nNotes\n/h1\n\n                \nul\n\n                    {notes.map((note) =\n (\n                        \nli\n{note}\n/li\n\n                    ))}\n                \n/ul\n\n\n                \nForm onSubmit={this.handleSubmit}\n\n                    \nTextarea\n                        label=\nAdd note\n\n                        id=\nnote\n\n                        name=\nnote\n\n                    /\n\n                    \nButton\nSubmit\n/Button\n\n                \n/Form\n\n\n            \n/div\n\n        );\n    }\n}\n\nexport default sdkConnect(Notes);\n\n\n\n\nThe SDK can automatically save form values to app/entity storage with \nthis.props.storage.onSubmitApp\n and \nthis.props.storage.onSubmitEntity\n. Use them as the form \nonSubmit\n handler, and the form values will be written to storage using the name of the form as the storage key.\n\n\nThe following example uses \nthis.props.storage.onSubmitApp\n to automatically save the form values to app storage. The values will be saved using the key \"settings\".\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Form, Input, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageSettings extends React.Component {\n  render() {\n    const { storage } = this.props;\n    const settings = storage.app.settings || {};\n\n    /**\n     * @returns {XML}\n     */\n    return (\n        \ndiv\n\n            \ndiv\nClient ID: {settings.clientId}\n/div\n\n            \nForm name=\nsettings\n onSubmit={storage.onSubmitApp}\n\n              \nInput\n                id=\nclientId\n\n                name=\nclientId\n\n              /\n\n            \n/Form\n\n            \nButton\nSubmit\n/Button\n\n        \n/div\n\n    );\n}\n\n\n\n\nAn optional callback may be passed to the submit handlers which is called after the form values have been successfully written to storage.\n\n\nclass PageSettings extends React.Component {\n    /**\n     * Called after the values have been saved to storage\n     */\n    handleSubmit = (values) =\n {\n        console.log(values);\n        this.props.route.to('index');\n    };\n\n    /**\n     * @returns {XML}\n     */\n    render() {\n        const { storage } = this.props;\n\n        return (\n            \nForm\n              name=\nsettings\n\n              onSubmit={storage.onSubmitApp(this.handleSubmit)}\n            \n\n              \nInput\n                id=\nclientId\n\n                name=\nclientId\n\n              /\n\n            \n/Form\n\n        );\n    }\n}\n\n\n\n\n\n\nRoute\n\n\nthis.props.route\n\n\nA light-weight router which is used to display different \"pages\" within an app. Pages within apps do not have URLs like web pages, but they can be given simple labels like \"settings\" or \"index\", and \nthis.props.route\n can then be used to switch between them.\n\n\nThe following example uses a \nswitch\n statement to display a different page depending on the current location.\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport PageAccount from './PageAccount';\nimport PageIndex from './PageIndex';\n\nclass Content extends React.Component {\n    render() {\n        const { route } = this.props;\n\n        switch (route.location) {\n          case 'account':\n            return \nPageAccount /\n;\n          case 'index':\n            return \nPageIndex /\n;\n        }\n    }\n}\n\nexport default sdkConnect(Content);\n\n\n\n\nThe object contains two properties:\n\n\n\n\nthis.props.route.location\n - A string with the name of the current page\n\n\nthis.props.route.params\n - An object of key/value pairs associated with the location\n\n\n\n\nThe \nRoutes\n and \nRoute\n components may be used in place of a \nswitch\n statement.\n\n\n// App.jsx\nimport React from 'react';\nimport { Routes, Route, sdkConnect } from 'deskpro-sdk-react';\nimport PageAccount from './PageAccount';\nimport PageIndex from './PageIndex';\n\nclass App extends React.Component {\n  render() {\n    return (\n      \nRoutes\n\n        \nRoute location=\naccount\n component={PageAccount} /\n\n        \nRoute location=\nindex\n component={PageIndex} /\n\n      \n/Routes\n\n    );\n  }\n}\n\nexport default sdkConnect(App);\n\n\n\n\nThe location is changed by calling \nthis.props.route.to()\n with the name of a page.\n\n\nthis.props.route.to('index');\n\n\n\n\nParams may also be passed along with the location.\n\n\nthis.props.route.to('account', { id: 5 });\n\n\n\n\nThe following example renders two pages. An \"index\" page with a form where a note may be entered, and a \"note\" page which displays the note.\n\n\n// PageIndex.jsx\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Form, Input, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageIndex extends React.Component {\n    /**\n     * Switches to the \nnote\n page, passing the note value along with\n     * the location.\n     */\n    handleSubmit = (values) =\n {\n        this.props.route.to('note', { note: values.note });\n    };\n\n    /**\n     * @returns {XML}\n     */\n    render() {\n        return (\n            \ndiv\n\n                \nForm onSubmit={this.handleSubmit}\n\n                    \nInput\n                        label=\nNote:\n\n                        id=\nnote\n\n                        name=\nnote\n\n                    /\n\n                    \nButton\nSubmit\n/Button\n\n                \n/Form\n\n            \n/div\n\n        );\n    }\n}\n\nexport default sdkConnect(PageIndex);\n\n\n\n\n// PageNote.jsx\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\n\nclass PageNote extends React.Component {\n    /**\n     * Changes to the index page when the button is clicked.\n     */\n    handleClick = () =\n {\n        this.props.route.to('index');\n    };\n\n    /**\n     * @returns {XML}\n     */\n    render() {\n        const { route } = this.props;\n\n        return (\n            \ndiv\n\n                \np\n{route.params.note}\n/p\n\n                \nbutton onClick={this.handleClick}\n\n                    To index page\n                \n/button\n\n            \n/div\n\n        );\n    }\n}\n\nexport default sdkConnect(PageNote);\n\n\n\n\nThe \nRoutes\n and \nRoute\n components are used to switch between the two pages.\n\n\n// App.jsx\nimport React from 'react';\nimport { Routes, Route } from 'deskpro-sdk-react';\nimport PageNote from './PageNote';\nimport PageIndex from './PageIndex';\n\nconst App = () =\n (\n  \nRoutes\n\n    \nRoute location=\nnote\n component={PageNote} /\n\n    \nRoute location=\nindex\n component={PageIndex} /\n\n  \n/Routes\n\n);\n\n\n\n\nConnected components may also change the location using the \nLink\n and \nLinkButton\n components.\n\n\nimport React from 'react';\nimport { sdkConnect, Link, LinkButton } from 'deskpro-sdk-react';\n\nclass Menu extends React.Component {\n    render() {\n        return (\n            \nnav\n\n                \nul\n\n                    \nli\n\n                        \nLink to=\nsettings\n\n                            Settings\n                        \n/Link\n\n                    \n/li\n\n                    \nli\n\n                        \nLink to=\naccount\n params={{ id: 5 }}\n\n                            Account\n                        \n/Link\n\n                    \n/li\n\n                \n/ul\n\n                \nLinkButton to=\nindex\n\n                    Home\n                \n/LinkButton\n\n            \n/nav\n\n        );\n    }\n}\n\nexport default sdkConnect(Menu);\n\n\n\n\n\n\nOAuth\n\n\nthis.props.oauth\n\n\nAn object which authenticates with remote services and stores oauth credentials.\n\n\nSave oauth connection settings.\n\n\nconst connection = {\n  urlAccessToken: OAUTH_ACCESS_URI,\n  urlAuthorize:   OAUTH_AUTH_URI,\n  clientId:       '...',\n  clientSecret:   '...'\n};\n\nthis.props.oauth.register('provider_name', connection);\n\n\n\n\nAuthenticate with the oauth provider and save the access token.\n\n\nthis.props.oauth.access('provider_name')\n  .then(({ accessToken }) =\n {\n    this.props.storage.setApp({ user_settings: { accessToken } });\n  });\n\n\n\n\nRead the app oauth provider settings.\n\n\nconst provider_settings = this.props.oauth.providers.provider_name;\n\n\n\n\n\n\nTabData\n\n\nthis.props.tabData\n\n\nAn object which is populated with the details of the currently opened ticket.\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\n\nclass TicketInfo extends React.Component {\n    render() {\n        const { tabData } = this.props;\n\n        return (\n            \nul\n\n                \nli\nID: {tabData.id}\n/li\n\n                \nli\nCreated: {tabData.date_created}\n/li\n\n                \nli\nSubject: {tabData.subject}\n/li\n\n            \n/ul\n\n        );\n    }\n}\n\nexport default sdkConnect(Menu);\n\n\n\n\nThe object contains the following properties:\n\n\n{\n    id:                             number,\n    is_hold:                        bool,\n    access_code:                    string,\n    access_code_email_body_token:   string,\n    access_code_email_header_token: string,\n    agent:                          object,\n    attachments:                    array,\n    auth:                           string,\n    category:                       object,\n    count_agent_replies:            number,\n    count_user_replies:             number,\n    current_user_waiting:           number,\n    current_user_waiting_work:      number,\n    custom_data:                    array,\n    date_agent_waiting:             string,\n    date_agent_waiting_ts:          number,\n    date_agent_waiting_ts_ms:       number,\n    date_archived:                  string,\n    date_archived_ts:               number,\n    date_archived_ts_ms:            number,\n    date_created:                   string,\n    date_created_ts:                number,\n    date_created_ts_ms:             number,\n    date_feedback_rating_ts:        number,\n    date_feedback_rating_ts_ms:     number,\n    date_first_agent_assign:        string,\n    date_first_agent_assign_ts:     number,\n    date_first_agent_assign_ts_ms:  number,\n    date_first_agent_reply:         string,\n    date_first_agent_reply_ts:      number,\n    date_first_agent_reply_ts_ms:   number,\n    date_last_agent_reply:          string,\n    date_last_agent_reply_ts:       number,\n    date_last_agent_reply_ts_ms:    number,\n    date_last_user_reply:           string,\n    date_last_user_reply_ts:        number,\n    date_last_user_reply_ts_ms:     number,\n    date_locked:                    string,\n    date_locked_ts:                 number,\n    date_locked_ts_ms:              number,\n    date_on_hold:                   string,\n    date_on_hold_ts:                number,\n    date_on_hold_ts_ms:             number,\n    date_resolved:                  string,\n    date_resolved_ts:               number,\n    date_resolved_ts_ms:            number,\n    date_status:                    string,\n    date_status_ts:                 number,\n    date_status_ts_ms:              number,\n    date_user_waiting:              string,\n    date_user_waiting_ts:           number,\n    date_user_waiting_ts_ms:        number,\n    department:                     object,\n    has_attachments:                bool,\n    hidden_status:                  string,\n    labels:                         array,\n    language:                       object,\n    organization:                   object,\n    original_subject:               string,\n    parent_ticket:                  string,\n    participants:                   array,\n    person:                         object,\n    person_email:                   object,\n    priority:                       string,\n    product:                        object,\n    ref:                            string,\n    sent_to_address:                string,\n    status:                         string,\n    subject:                        string,\n    ticket_hash:                    string,\n    ticket_slas:                    object,\n    total_to_first_reply:           number,\n    total_to_first_reply_work:      number,\n    total_to_resolution:            number,\n    total_to_resolution_work:       number,\n    total_user_waiting:             number,\n    total_user_waiting_real:        number,\n    total_user_waiting_work:        number,\n    urgency:                        number,\n    waiting_times:                  array,\n    workflow:                       object,\n    worst_sla_status:               string\n}\n\n\n\n\n\n\nMe\n\n\nthis.props.me\n\n\nAn object which is populated with the details of the agent/admin using the app.\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\n\nclass Page extends React.Component {\n    render() {\n        const { me } = this.props;\n\n        return (\n            \ndiv\n\n                Welcome, {me.name}!\n            \n/div\n\n        );\n    }\n}\n\nexport default sdkConnect(Menu);\n\n\n\n\nThe object contains the following properties:\n\n\n{\n    id:              number,\n    avatar:          object,\n    can_admin:       bool,\n    can_agent:       bool,\n    can_billing:     bool,\n    is_agent:        bool,\n    is_confirmed:    bool,\n    is_contact:      bool,\n    is_deleted:      bool,\n    is_disabled:     bool,\n    is_user:         bool,\n    was_agent:       bool,\n    online:          bool,\n    labels:          array,\n    teams:           array,\n    phone_numbers:   array,\n    date_created:    string,\n    date_last_login: string,\n    name:            string,\n    display_name:    string,\n    first_name:      string,\n    last_name:       string,\n    primary_email:   object,\n    emails:          array,\n    gravatar_url:    string,\n    tickets_count:   number,\n    timezone:        string\n}\n\n\n\n\n\n\nUI\n\n\nthis.props.ui\n\n\nAn object containing methods which allow you to manipulate the UI.\n\n\nCall \nthis.props.ui.setLoading(true)\n to display the loading animation, and \nthis.props.ui.setLoading(false)\n to turn it off.\n\n\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-react-sdk';\n\nclass Hello extends React.Component {\n    componentWillUpdate() {\n        this.props.ui.setLoading(true);\n    }\n\n    componentDidUpdate() {\n        this.props.ui.setLoading(false);\n    }\n\n    render() {\n        return (\n            \ndiv\nHello!\n/div\n\n        );\n    }\n}\n\nexport default sdkConnect(Hello);\n\n\n\n\nCall \nthis.props.ui.setBadgeCount()\n to set the badge number displayed above the app icon. The badge is invisible when the value is zero.\n\n\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-react-sdk';\n\nclass Hello extends React.Component {\n    componentDidMount() {\n        this.props.ui.setBadgeCount(3);\n    }\n\n    render() {\n        return (\n            \ndiv\nHello!\n/div\n\n        );\n    }\n}\n\nexport default sdkConnect(Hello);", 
            "title": "Props"
        }, 
        {
            "location": "/pages/props/#overview", 
            "text": "The SDK automatically passes a number of objects to your components via props. Some of the SDK props contain information about the running application and current context, and some provide methods to interact with DeskPRO. For instance the  storage  prop which allows developers to persist values with the DeskPRO application, and the  me  prop which contains information about the person using the app.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/props/#connecting-your-components", 
            "text": "Components which need access to the SDK props must be  connected  to the SDK. The  DeskproSDK component  automatically connects the wrapped component.  The  App /  component in the following example will have all SDK props passed to it because it's wrapped by the  DeskproSDK  component.  ReactDOM.render(\n     DeskproSDK dpapp={dpapp} store={store} \n       App / \n     /DeskproSDK ,\n    document.getElementById('deskpro-app')\n);  Only the app root component gets wrapped by  DeskproSDK . The other components in your app will use the  sdkConnect  function to connect them to the SDK props. Its usage is optional, and is only required when a component needs access to the props.  import React from 'react';\nimport { sdkConnect } from 'deskpro-react-sdk';\n\nclass PageSettings extends React.Component {\n    render() {\n        return (\n             div \n                {this.props.storage.app.country}\n             /div \n        );\n    }\n}\n\nexport default sdkConnect(PageSettings);  The function may be used as a decorator when  decorators are enabled .  import React from 'react';\nimport { sdkConnect } from 'deskpro-react-sdk';\n\n@sdkConnect\nexport default class PageSettings extends React.Component {\n    render() {\n        return (\n             div \n                {this.props.storage.app.country}\n             /div \n        );\n    }\n}  Advanced usage \nReact SDK uses  Redux  internally to manage state. The same  mapStateToProps  and  mapDispatchToProps  functions  supported by React Redux  may also be passed to the  sdkConnect  function.  import React from 'react';\nimport { sdkConnect } from 'deskpro-react-sdk';\n\nclass PageSettings extends React.Component {\n    render() {\n        return (\n             div \n                {this.props.country}\n             /div \n        );\n    }\n}\n\nconst mapStateToProps(state) {\n    return {\n        country: state.sdk.storage.app.settings.country\n    };\n};\n\nexport default sdkConnect(PageSettings, mapStateToProps);", 
            "title": "Connecting your components"
        }, 
        {
            "location": "/pages/props/#storage", 
            "text": "this.props.storage  An object which reads and writes values to the DeskPRO database in order to persist them from one invocation of the app and another. Two mechanisms are provided for storing values. One for storing global \"app\" values, and one for attaching \"entity\" values to the currently opened ticket.   Note  See the  manifest storage configuration  for more information about declaring storage values and setting permissions.   Call  this.props.storage.setApp()  to persist global values which will be bound the app. For instance app settings or user information. The method takes an object of key/value pairs.  this.props.storage.setApp({ country: 'uk' });  Once the values have been saved the SDK will pass new props to the connected components with the new values. The app values can then be read from the  this.props.storage.app  object.  const country = this.props.storage.app.country;  The following example renders a form with a list of countries. The component uses  this.props.storage  to save the selected value.  import React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Form, Select, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageCountry extends React.Component {\n    /**\n     * Receives the submitted form values and saves them to\n     * app storage\n     */\n    handleSubmit = (values) =  {\n        this.props.storage.setApp({ country: values.country });\n    };\n\n    /**\n     * @returns {XML}\n     */\n    render() {\n        const initialValues = {\n            country: this.props.storage.app.country\n        };\n        const options = [\n            { label: 'United Kingdom', value: 'uk' },\n            { label: 'United States', value: 'us' }\n        ];\n\n        return (\n             Form onSubmit={this.handleSubmit} initialValues={initialValues} \n                 Select\n                    label= Country \n                    id= country \n                    name= country \n                    options={options}\n                / \n                 Button Submit /Button \n             /Form \n        );\n    }\n}\n\nexport default sdkConnect(PageCountry);  Call  this.props.storage.setEntity()  to attach values to the currently opened ticket. Unlike the global app values, entity values are unique to each ticket. The method takes an object of key/value pairs.  this.props.storage.setEntity({ note: '...' });   Note  Under the hood the SDK saves the value using key \"note:{ticket_id}\". Which means the value of \"note\" is unique to the ticket being viewed.   Once the values have been saved they can be read from the  this.props.storage.entity  object.  const note = this.props.storage.entity.note;  The following example allows agents to attach notes to the opened ticket. It shows the current notes with a form to create a new note.  import React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Form, Textarea, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass Notes extends React.Component {\n    /**\n     * Receives the submitted form values and saves them to\n     * app storage\n     */\n    handleSubmit = (values) =  {\n        const { storage } = this.props;\n        const notes = storage.entity.notes;\n\n        // Clone the existing notes or create a new array if the ticket\n        // doesn't have any existing notes.\n        const newNotes = (notes || []).slice(0);\n        newNotes.push(values.note);\n\n        // Attach the notes to the open ticket. This will overwrite the\n        // existing value.\n        storage.setEntity({ notes: newNotes });\n    };\n\n    /**\n     * @returns {XML}\n     */\n    render() {\n        const { storage } = this.props;\n        const notes = storage.entity.notes;\n\n        return (\n             div \n                 h1 Notes /h1 \n                 ul \n                    {notes.map((note) =  (\n                         li {note} /li \n                    ))}\n                 /ul \n\n                 Form onSubmit={this.handleSubmit} \n                     Textarea\n                        label= Add note \n                        id= note \n                        name= note \n                    / \n                     Button Submit /Button \n                 /Form \n\n             /div \n        );\n    }\n}\n\nexport default sdkConnect(Notes);  The SDK can automatically save form values to app/entity storage with  this.props.storage.onSubmitApp  and  this.props.storage.onSubmitEntity . Use them as the form  onSubmit  handler, and the form values will be written to storage using the name of the form as the storage key.  The following example uses  this.props.storage.onSubmitApp  to automatically save the form values to app storage. The values will be saved using the key \"settings\".  import React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Form, Input, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageSettings extends React.Component {\n  render() {\n    const { storage } = this.props;\n    const settings = storage.app.settings || {};\n\n    /**\n     * @returns {XML}\n     */\n    return (\n         div \n             div Client ID: {settings.clientId} /div \n             Form name= settings  onSubmit={storage.onSubmitApp} \n               Input\n                id= clientId \n                name= clientId \n              / \n             /Form \n             Button Submit /Button \n         /div \n    );\n}  An optional callback may be passed to the submit handlers which is called after the form values have been successfully written to storage.  class PageSettings extends React.Component {\n    /**\n     * Called after the values have been saved to storage\n     */\n    handleSubmit = (values) =  {\n        console.log(values);\n        this.props.route.to('index');\n    };\n\n    /**\n     * @returns {XML}\n     */\n    render() {\n        const { storage } = this.props;\n\n        return (\n             Form\n              name= settings \n              onSubmit={storage.onSubmitApp(this.handleSubmit)}\n             \n               Input\n                id= clientId \n                name= clientId \n              / \n             /Form \n        );\n    }\n}", 
            "title": "Storage"
        }, 
        {
            "location": "/pages/props/#route", 
            "text": "this.props.route  A light-weight router which is used to display different \"pages\" within an app. Pages within apps do not have URLs like web pages, but they can be given simple labels like \"settings\" or \"index\", and  this.props.route  can then be used to switch between them.  The following example uses a  switch  statement to display a different page depending on the current location.  import React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport PageAccount from './PageAccount';\nimport PageIndex from './PageIndex';\n\nclass Content extends React.Component {\n    render() {\n        const { route } = this.props;\n\n        switch (route.location) {\n          case 'account':\n            return  PageAccount / ;\n          case 'index':\n            return  PageIndex / ;\n        }\n    }\n}\n\nexport default sdkConnect(Content);  The object contains two properties:   this.props.route.location  - A string with the name of the current page  this.props.route.params  - An object of key/value pairs associated with the location   The  Routes  and  Route  components may be used in place of a  switch  statement.  // App.jsx\nimport React from 'react';\nimport { Routes, Route, sdkConnect } from 'deskpro-sdk-react';\nimport PageAccount from './PageAccount';\nimport PageIndex from './PageIndex';\n\nclass App extends React.Component {\n  render() {\n    return (\n       Routes \n         Route location= account  component={PageAccount} / \n         Route location= index  component={PageIndex} / \n       /Routes \n    );\n  }\n}\n\nexport default sdkConnect(App);  The location is changed by calling  this.props.route.to()  with the name of a page.  this.props.route.to('index');  Params may also be passed along with the location.  this.props.route.to('account', { id: 5 });  The following example renders two pages. An \"index\" page with a form where a note may be entered, and a \"note\" page which displays the note.  // PageIndex.jsx\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Form, Input, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageIndex extends React.Component {\n    /**\n     * Switches to the  note  page, passing the note value along with\n     * the location.\n     */\n    handleSubmit = (values) =  {\n        this.props.route.to('note', { note: values.note });\n    };\n\n    /**\n     * @returns {XML}\n     */\n    render() {\n        return (\n             div \n                 Form onSubmit={this.handleSubmit} \n                     Input\n                        label= Note: \n                        id= note \n                        name= note \n                    / \n                     Button Submit /Button \n                 /Form \n             /div \n        );\n    }\n}\n\nexport default sdkConnect(PageIndex);  // PageNote.jsx\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\n\nclass PageNote extends React.Component {\n    /**\n     * Changes to the index page when the button is clicked.\n     */\n    handleClick = () =  {\n        this.props.route.to('index');\n    };\n\n    /**\n     * @returns {XML}\n     */\n    render() {\n        const { route } = this.props;\n\n        return (\n             div \n                 p {route.params.note} /p \n                 button onClick={this.handleClick} \n                    To index page\n                 /button \n             /div \n        );\n    }\n}\n\nexport default sdkConnect(PageNote);  The  Routes  and  Route  components are used to switch between the two pages.  // App.jsx\nimport React from 'react';\nimport { Routes, Route } from 'deskpro-sdk-react';\nimport PageNote from './PageNote';\nimport PageIndex from './PageIndex';\n\nconst App = () =  (\n   Routes \n     Route location= note  component={PageNote} / \n     Route location= index  component={PageIndex} / \n   /Routes \n);  Connected components may also change the location using the  Link  and  LinkButton  components.  import React from 'react';\nimport { sdkConnect, Link, LinkButton } from 'deskpro-sdk-react';\n\nclass Menu extends React.Component {\n    render() {\n        return (\n             nav \n                 ul \n                     li \n                         Link to= settings \n                            Settings\n                         /Link \n                     /li \n                     li \n                         Link to= account  params={{ id: 5 }} \n                            Account\n                         /Link \n                     /li \n                 /ul \n                 LinkButton to= index \n                    Home\n                 /LinkButton \n             /nav \n        );\n    }\n}\n\nexport default sdkConnect(Menu);", 
            "title": "Route"
        }, 
        {
            "location": "/pages/props/#oauth", 
            "text": "this.props.oauth  An object which authenticates with remote services and stores oauth credentials.  Save oauth connection settings.  const connection = {\n  urlAccessToken: OAUTH_ACCESS_URI,\n  urlAuthorize:   OAUTH_AUTH_URI,\n  clientId:       '...',\n  clientSecret:   '...'\n};\n\nthis.props.oauth.register('provider_name', connection);  Authenticate with the oauth provider and save the access token.  this.props.oauth.access('provider_name')\n  .then(({ accessToken }) =  {\n    this.props.storage.setApp({ user_settings: { accessToken } });\n  });  Read the app oauth provider settings.  const provider_settings = this.props.oauth.providers.provider_name;", 
            "title": "OAuth"
        }, 
        {
            "location": "/pages/props/#tabdata", 
            "text": "this.props.tabData  An object which is populated with the details of the currently opened ticket.  import React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\n\nclass TicketInfo extends React.Component {\n    render() {\n        const { tabData } = this.props;\n\n        return (\n             ul \n                 li ID: {tabData.id} /li \n                 li Created: {tabData.date_created} /li \n                 li Subject: {tabData.subject} /li \n             /ul \n        );\n    }\n}\n\nexport default sdkConnect(Menu);  The object contains the following properties:  {\n    id:                             number,\n    is_hold:                        bool,\n    access_code:                    string,\n    access_code_email_body_token:   string,\n    access_code_email_header_token: string,\n    agent:                          object,\n    attachments:                    array,\n    auth:                           string,\n    category:                       object,\n    count_agent_replies:            number,\n    count_user_replies:             number,\n    current_user_waiting:           number,\n    current_user_waiting_work:      number,\n    custom_data:                    array,\n    date_agent_waiting:             string,\n    date_agent_waiting_ts:          number,\n    date_agent_waiting_ts_ms:       number,\n    date_archived:                  string,\n    date_archived_ts:               number,\n    date_archived_ts_ms:            number,\n    date_created:                   string,\n    date_created_ts:                number,\n    date_created_ts_ms:             number,\n    date_feedback_rating_ts:        number,\n    date_feedback_rating_ts_ms:     number,\n    date_first_agent_assign:        string,\n    date_first_agent_assign_ts:     number,\n    date_first_agent_assign_ts_ms:  number,\n    date_first_agent_reply:         string,\n    date_first_agent_reply_ts:      number,\n    date_first_agent_reply_ts_ms:   number,\n    date_last_agent_reply:          string,\n    date_last_agent_reply_ts:       number,\n    date_last_agent_reply_ts_ms:    number,\n    date_last_user_reply:           string,\n    date_last_user_reply_ts:        number,\n    date_last_user_reply_ts_ms:     number,\n    date_locked:                    string,\n    date_locked_ts:                 number,\n    date_locked_ts_ms:              number,\n    date_on_hold:                   string,\n    date_on_hold_ts:                number,\n    date_on_hold_ts_ms:             number,\n    date_resolved:                  string,\n    date_resolved_ts:               number,\n    date_resolved_ts_ms:            number,\n    date_status:                    string,\n    date_status_ts:                 number,\n    date_status_ts_ms:              number,\n    date_user_waiting:              string,\n    date_user_waiting_ts:           number,\n    date_user_waiting_ts_ms:        number,\n    department:                     object,\n    has_attachments:                bool,\n    hidden_status:                  string,\n    labels:                         array,\n    language:                       object,\n    organization:                   object,\n    original_subject:               string,\n    parent_ticket:                  string,\n    participants:                   array,\n    person:                         object,\n    person_email:                   object,\n    priority:                       string,\n    product:                        object,\n    ref:                            string,\n    sent_to_address:                string,\n    status:                         string,\n    subject:                        string,\n    ticket_hash:                    string,\n    ticket_slas:                    object,\n    total_to_first_reply:           number,\n    total_to_first_reply_work:      number,\n    total_to_resolution:            number,\n    total_to_resolution_work:       number,\n    total_user_waiting:             number,\n    total_user_waiting_real:        number,\n    total_user_waiting_work:        number,\n    urgency:                        number,\n    waiting_times:                  array,\n    workflow:                       object,\n    worst_sla_status:               string\n}", 
            "title": "TabData"
        }, 
        {
            "location": "/pages/props/#me", 
            "text": "this.props.me  An object which is populated with the details of the agent/admin using the app.  import React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\n\nclass Page extends React.Component {\n    render() {\n        const { me } = this.props;\n\n        return (\n             div \n                Welcome, {me.name}!\n             /div \n        );\n    }\n}\n\nexport default sdkConnect(Menu);  The object contains the following properties:  {\n    id:              number,\n    avatar:          object,\n    can_admin:       bool,\n    can_agent:       bool,\n    can_billing:     bool,\n    is_agent:        bool,\n    is_confirmed:    bool,\n    is_contact:      bool,\n    is_deleted:      bool,\n    is_disabled:     bool,\n    is_user:         bool,\n    was_agent:       bool,\n    online:          bool,\n    labels:          array,\n    teams:           array,\n    phone_numbers:   array,\n    date_created:    string,\n    date_last_login: string,\n    name:            string,\n    display_name:    string,\n    first_name:      string,\n    last_name:       string,\n    primary_email:   object,\n    emails:          array,\n    gravatar_url:    string,\n    tickets_count:   number,\n    timezone:        string\n}", 
            "title": "Me"
        }, 
        {
            "location": "/pages/props/#ui", 
            "text": "this.props.ui  An object containing methods which allow you to manipulate the UI.  Call  this.props.ui.setLoading(true)  to display the loading animation, and  this.props.ui.setLoading(false)  to turn it off.   import React from 'react';\nimport { sdkConnect } from 'deskpro-react-sdk';\n\nclass Hello extends React.Component {\n    componentWillUpdate() {\n        this.props.ui.setLoading(true);\n    }\n\n    componentDidUpdate() {\n        this.props.ui.setLoading(false);\n    }\n\n    render() {\n        return (\n             div Hello! /div \n        );\n    }\n}\n\nexport default sdkConnect(Hello);  Call  this.props.ui.setBadgeCount()  to set the badge number displayed above the app icon. The badge is invisible when the value is zero.   import React from 'react';\nimport { sdkConnect } from 'deskpro-react-sdk';\n\nclass Hello extends React.Component {\n    componentDidMount() {\n        this.props.ui.setBadgeCount(3);\n    }\n\n    render() {\n        return (\n             div Hello! /div \n        );\n    }\n}\n\nexport default sdkConnect(Hello);", 
            "title": "UI"
        }, 
        {
            "location": "/pages/components/DeskproSDK/", 
            "text": "Overview\n\n\nThe \nDeskproSDK\n component bootstraps the app and \nconnects it to the SDK\n.\n\n\nimport ReactDOM from 'react-dom';\nimport { DeskproSDK, configureStore } from 'deskpro-sdk-react';\n\nconst store = configureStore(dpapp);\n\nexport function runApp(dpapp) {\n  ReactDOM.render(\n    \nDeskproSDK dpapp={dpapp} store={store}\n\n      \nApp /\n\n    \n/DeskproSDK\n,\n    document.getElementById('deskpro-app')\n  );\n}\n\n\n\n\n\nThe app component may also be passed to \nDeskproSDK\n via the \ncomponent\n prop.\n\n\nimport ReactDOM from 'react-dom';\nimport { DeskproSDK, configureStore } from 'deskpro-sdk-react';\n\nconst store = configureStore(dpapp);\n\nexport function runApp(dpapp) {\n  ReactDOM.render(\n    \nDeskproSDK dpapp={dpapp} store={store} component={App} /\n,\n    document.getElementById('deskpro-app')\n  );\n}\n\n\n\n\n\nProps\n\n\nDeskproSDK\n    dpapp={object}\n    store={object}\n    component={element}\n/", 
            "title": "DeskproSDK"
        }, 
        {
            "location": "/pages/components/DeskproSDK/#overview", 
            "text": "The  DeskproSDK  component bootstraps the app and  connects it to the SDK .  import ReactDOM from 'react-dom';\nimport { DeskproSDK, configureStore } from 'deskpro-sdk-react';\n\nconst store = configureStore(dpapp);\n\nexport function runApp(dpapp) {\n  ReactDOM.render(\n     DeskproSDK dpapp={dpapp} store={store} \n       App / \n     /DeskproSDK ,\n    document.getElementById('deskpro-app')\n  );\n}  The app component may also be passed to  DeskproSDK  via the  component  prop.  import ReactDOM from 'react-dom';\nimport { DeskproSDK, configureStore } from 'deskpro-sdk-react';\n\nconst store = configureStore(dpapp);\n\nexport function runApp(dpapp) {\n  ReactDOM.render(\n     DeskproSDK dpapp={dpapp} store={store} component={App} / ,\n    document.getElementById('deskpro-app')\n  );\n}", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/components/DeskproSDK/#props", 
            "text": "DeskproSDK\n    dpapp={object}\n    store={object}\n    component={element}\n/", 
            "title": "Props"
        }, 
        {
            "location": "/pages/components/Routes/", 
            "text": "Overview\n\n\nThe SDK includes a light-weight router which displays different pages within DeskPRO apps. Route locations are defined using simple names instead of addresses, because DeskPRO apps do not use the browser location (URL). The current location is changed by calling \nthis.props.route.to()\n with the name of the new location, or by using the \nLink\n and \nLinkButton\n components.\n\n\nExample\n\n\nFirst create a few pages for the app.\n\n\n// PageSettings.jsx\nimport React from 'react';\nimport { Link, sdkConnect } from 'deskpro-sdk-react';\n\nconst PageSettings = () =\n (\n    \ndiv\n\n        \nh1\nSettings\n/h1\n\n        \nLink to=\nindex\n\n            Go to index\n        \n/Link\n\n    \n/div\n\n);\n\nexport default sdkConnect(PageSettings);\n\n\n\n\n// PageIndex.jsx\nimport React from 'react';\nimport { Link, sdkConnect } from 'deskpro-sdk-react';\n\nconst PageSettings = () =\n (\n    \ndiv\n\n        \nh1\nIndex\n/h1\n\n        \nLink to=\nsettings\n\n            Go to settings\n        \n/Link\n\n    \n/div\n\n);\n\nexport default sdkConnect(PageSettings);\n\n\n\n\n// PageNotFound.jsx\nimport React from 'react';\n\nconst PageNotFound = () =\n (\n    \ndiv\n\n        \nh1\nNot Found\n/h1\n\n    \n/div\n\n);\n\nexport default PageNotFound;\n\n\n\n\nNow create the main app component which contains the \nRoutes\n. The \nRoute\n which matches the current location gets rendered. The route with the \ndefaultRoute\n prop renders when no other routes matches the current location.\n\n\n// App.jsx\nimport React from 'react';\nimport { Routes, Route, sdkConnect } from 'deskpro-sdk-react';\nimport PageSettings from './PageSettings';\nimport PageIndex from './PageIndex';\nimport PageNotFound from './PageNotFound';\n\nclass App extends React.Component {\n  render() {\n    return (\n      \nRoutes\n\n        \nRoute location=\nsettings\n component={PageSettings} /\n\n        \nRoute location=\nindex\n component={PageIndex} /\n\n        \nRoute defaultRoute component={PageNotFound} /\n\n      \n/Routes\n\n    );\n  }\n}\n\nexport default sdkConnect(App);\n\n\n\n\nRoutes may also be defined using child components instead of the \ncomponent\n prop.\n\n\nRoutes\n\n    \nRoute location=\nsettings\n\n        \nPageSettings /\n\n    \n/Route\n\n    \nRoute location=\nindex\n\n        \nPageIndex /\n\n    \n/Route\n\n    \nRoute defaultRoute\n\n        \nh1\nNot Found\n/h1\n\n    \n/Route\n\n\n/Routes\n\n\n\n\n\nChanging routes manually\n\n\nCall \nthis.props.route.to()\n to change routes manually.\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\n\nclass PageSettings extends Route.Component {\n    handleClick = () =\n {\n        this.props.route.to('index');\n    };\n\n    render() {\n        return (\n            \ndiv\n\n                \nh1\nSettings\n/h1\n\n                \nbutton onClick={this.handleClick}\n\n                    Go to index\n                \n/button\n\n            \n/div\n\n        );\n    }\n};\n\nexport default sdkConnect(PageSettings);\n\n\n\n\nSee also\n\n\n\n\nthis.props.route\n\n\nLink\n\n\nLinkButton", 
            "title": "Routes"
        }, 
        {
            "location": "/pages/components/Routes/#overview", 
            "text": "The SDK includes a light-weight router which displays different pages within DeskPRO apps. Route locations are defined using simple names instead of addresses, because DeskPRO apps do not use the browser location (URL). The current location is changed by calling  this.props.route.to()  with the name of the new location, or by using the  Link  and  LinkButton  components.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/components/Routes/#example", 
            "text": "First create a few pages for the app.  // PageSettings.jsx\nimport React from 'react';\nimport { Link, sdkConnect } from 'deskpro-sdk-react';\n\nconst PageSettings = () =  (\n     div \n         h1 Settings /h1 \n         Link to= index \n            Go to index\n         /Link \n     /div \n);\n\nexport default sdkConnect(PageSettings);  // PageIndex.jsx\nimport React from 'react';\nimport { Link, sdkConnect } from 'deskpro-sdk-react';\n\nconst PageSettings = () =  (\n     div \n         h1 Index /h1 \n         Link to= settings \n            Go to settings\n         /Link \n     /div \n);\n\nexport default sdkConnect(PageSettings);  // PageNotFound.jsx\nimport React from 'react';\n\nconst PageNotFound = () =  (\n     div \n         h1 Not Found /h1 \n     /div \n);\n\nexport default PageNotFound;  Now create the main app component which contains the  Routes . The  Route  which matches the current location gets rendered. The route with the  defaultRoute  prop renders when no other routes matches the current location.  // App.jsx\nimport React from 'react';\nimport { Routes, Route, sdkConnect } from 'deskpro-sdk-react';\nimport PageSettings from './PageSettings';\nimport PageIndex from './PageIndex';\nimport PageNotFound from './PageNotFound';\n\nclass App extends React.Component {\n  render() {\n    return (\n       Routes \n         Route location= settings  component={PageSettings} / \n         Route location= index  component={PageIndex} / \n         Route defaultRoute component={PageNotFound} / \n       /Routes \n    );\n  }\n}\n\nexport default sdkConnect(App);  Routes may also be defined using child components instead of the  component  prop.  Routes \n     Route location= settings \n         PageSettings / \n     /Route \n     Route location= index \n         PageIndex / \n     /Route \n     Route defaultRoute \n         h1 Not Found /h1 \n     /Route  /Routes", 
            "title": "Example"
        }, 
        {
            "location": "/pages/components/Routes/#changing-routes-manually", 
            "text": "Call  this.props.route.to()  to change routes manually.  import React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\n\nclass PageSettings extends Route.Component {\n    handleClick = () =  {\n        this.props.route.to('index');\n    };\n\n    render() {\n        return (\n             div \n                 h1 Settings /h1 \n                 button onClick={this.handleClick} \n                    Go to index\n                 /button \n             /div \n        );\n    }\n};\n\nexport default sdkConnect(PageSettings);", 
            "title": "Changing routes manually"
        }, 
        {
            "location": "/pages/components/Routes/#see-also", 
            "text": "this.props.route  Link  LinkButton", 
            "title": "See also"
        }, 
        {
            "location": "/pages/components/Link/", 
            "text": "Overview\n\n\nThe \nLink\n component changes the current route location when clicked. See the \nroute documentation\n for more information.\n\n\nProps\n\n\nLink\n    to={string}\n    params={object}\n/\n\n\n\n\n\nExample\n\n\nThe following example renders two links which change the current location when clicked.\n\n\nimport React from 'react';\nimport { Link, sdkConnect } from 'deskpro-sdk-react';\n\nclass Page extends React.Component {\n    render() {\n        return (\n            \ndiv\n\n                \nLink to=\nsettings\n\n                    Click\n                \n/Link\n\n                \nLink to=\nsettings\n params={{ country: 'uk' }}\n\n                    Click\n                \n/Link\n\n            \n/div\n\n        );\n    }\n}\n\nexport default sdkConnect(Page);\n\n\n\n\n\n\nNote\n\n\nComponents using the \nLink\n component must be \nconnected to the SDK\n using \nsdkConnect\n or \nDeskproSDK\n.", 
            "title": "Link"
        }, 
        {
            "location": "/pages/components/Link/#overview", 
            "text": "The  Link  component changes the current route location when clicked. See the  route documentation  for more information.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/components/Link/#props", 
            "text": "Link\n    to={string}\n    params={object}\n/", 
            "title": "Props"
        }, 
        {
            "location": "/pages/components/Link/#example", 
            "text": "The following example renders two links which change the current location when clicked.  import React from 'react';\nimport { Link, sdkConnect } from 'deskpro-sdk-react';\n\nclass Page extends React.Component {\n    render() {\n        return (\n             div \n                 Link to= settings \n                    Click\n                 /Link \n                 Link to= settings  params={{ country: 'uk' }} \n                    Click\n                 /Link \n             /div \n        );\n    }\n}\n\nexport default sdkConnect(Page);   Note  Components using the  Link  component must be  connected to the SDK  using  sdkConnect  or  DeskproSDK .", 
            "title": "Example"
        }, 
        {
            "location": "/pages/components/LinkButton/", 
            "text": "Overview\n\n\nThe \nLinkButton\n component changes the current route location when clicked. See the \nroute documentation\n for more information.\n\n\nProps\n\n\nLinkButton\n    to={string}\n    params={object}\n/\n\n\n\n\n\nExample\n\n\nThe following example renders two buttons which change the current location when clicked.\n\n\nimport React from 'react';\nimport { LinkButton, sdkConnect } from 'deskpro-sdk-react';\n\nclass Page extends React.Component {\n    render() {\n        return (\n            \ndiv\n\n                \nLinkButton to=\nsettings\n\n                    Click\n                \n/Link\n\n                \nLinkButton to=\nsettings\n params={{ country: 'uk' }}\n\n                    Click\n                \n/Link\n\n            \n/div\n\n        );\n    }\n}\n\nexport default sdkConnect(Page);\n\n\n\n\n\n\nNote\n\n\nComponents using the \nLinkButton\n component must be \nconnected to the SDK\n using \nsdkConnect\n or \nDeskproSDK\n.", 
            "title": "LinkButton"
        }, 
        {
            "location": "/pages/components/LinkButton/#overview", 
            "text": "The  LinkButton  component changes the current route location when clicked. See the  route documentation  for more information.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/components/LinkButton/#props", 
            "text": "LinkButton\n    to={string}\n    params={object}\n/", 
            "title": "Props"
        }, 
        {
            "location": "/pages/components/LinkButton/#example", 
            "text": "The following example renders two buttons which change the current location when clicked.  import React from 'react';\nimport { LinkButton, sdkConnect } from 'deskpro-sdk-react';\n\nclass Page extends React.Component {\n    render() {\n        return (\n             div \n                 LinkButton to= settings \n                    Click\n                 /Link \n                 LinkButton to= settings  params={{ country: 'uk' }} \n                    Click\n                 /Link \n             /div \n        );\n    }\n}\n\nexport default sdkConnect(Page);   Note  Components using the  LinkButton  component must be  connected to the SDK  using  sdkConnect  or  DeskproSDK .", 
            "title": "Example"
        }, 
        {
            "location": "/pages/tutorials/basic/", 
            "text": "Overview\n\n\nThis tutorial will walk you through creating a simple DeskPRO app which displays a list of people participating in a ticket.\n\n\n\n\n\n\nTo follow this tutorial you will need:\n\n\n\n\nDeskPRO running on your computer\n\n\nNPM 6 or greater\n\n\nGit 1.9 or greater\n\n\nA IDE or text editor\n\n\n\n\n\n\nStep 1. Clone the boilerplate\n\n\nThe SDK boilerplate includes the basic app configuration and files to help developers get started writing apps.\n\n\ngit clone https://github.com/deskpro/deskproapps-boilerplate-react basic-tutorial\ncd basic-tutorial\nnpm install\n\n\n\n\nStep 2. Update the manifest\n\n\nEdit the app configuration in \npackage.json\n, which can be found in the app root directory. Change the \"title\" property to \"Participants\".\n\n\n{\n  \ndeskpro\n: {\n    \nversion\n: \n2.1.0\n,\n    \ntitle\n: \nParticipants\n,\n    \nisSingle\n: true,\n    \nscope\n: \nagent\n,\n    \ntargets\n: [\n      {\n        \ntarget\n: \nticket-sidebar\n,\n        \nurl\n: \nhtml/index.html\n\n      }\n    ]\n  }\n}\n\n\n\n\nExplanation\n  \n\n\n\n\nThe \"title\" value will be shown in the app toolbar. See the \nmanifest documentation\n for more information.\n\n\n\n\nStep 3. Modify the app component\n\n\nEdit the app component at \nsrc/main/javascript/App.jsx\n to look like the following code.\n\n\n// App.jsx\n\nimport React from 'react';\nimport { Container, Avatar } from 'deskpro-components';\n\nexport default class App extends React.Component {\n  render() {\n    const { tabData } = this.props;\n\n    return (\n      \nContainer\n\n        \nul className=\nparticipants-list\n\n          {tabData.participants.map((p) =\n (\n            \nli key={p.person.id}\n\n              \nAvatar src={p.person.default_picture_url} /\n\n              \ndiv\n\n                {p.person.name}\n              \n/div\n\n              \ndiv\n\n                {p.person.primary_email.email}\n              \n/div\n\n            \n/li\n\n          ))}\n        \n/ul\n\n      \n/Container\n\n    );\n  }\n}\n\n\n\n\nExplanation\n\n\n\n\nThe SDK automatically injects the \ntabData\n prop into the component. This prop is a plain object which contains information about the open ticket. The code above iterates over the \ntabData.participants\n array and displays an avatar for each person.\n\n\n\n\nStep 4. Modify the app styles\n\n\nThe boilerplate includes a SASS stylesheet which can be found in \nsrc/main/sass/index.scss\n. Modify the stylesheet to look like the following.\n\n\n$dp-styles-font-path: \n~deskpro-components/src/styles/fonts/\n;\n@import \n~deskpro-components/src/styles/main.scss\n;\n\n.participants-list {\n  list-style-type: none;\n\n  li {\n    margin-bottom: 1rem;\n  }\n}\n\n\n\n\nStep 5. Run the dev server\n\n\nMake sure DeskPRO is running on your computer, and then from the app root directory run the following command.\n\n\nnpm run dev\n\n\n\n\nThe \ndev\n script builds your app and starts a development server which communicates with DeskPRO to install the app. Open \nhttps://localhost/agent/?appstore.environment=development\n when the the \ndev\n command finishes building to view the finished app.", 
            "title": "Basic App"
        }, 
        {
            "location": "/pages/tutorials/basic/#overview", 
            "text": "This tutorial will walk you through creating a simple DeskPRO app which displays a list of people participating in a ticket.    To follow this tutorial you will need:   DeskPRO running on your computer  NPM 6 or greater  Git 1.9 or greater  A IDE or text editor", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/tutorials/basic/#step-1-clone-the-boilerplate", 
            "text": "The SDK boilerplate includes the basic app configuration and files to help developers get started writing apps.  git clone https://github.com/deskpro/deskproapps-boilerplate-react basic-tutorial\ncd basic-tutorial\nnpm install", 
            "title": "Step 1. Clone the boilerplate"
        }, 
        {
            "location": "/pages/tutorials/basic/#step-2-update-the-manifest", 
            "text": "Edit the app configuration in  package.json , which can be found in the app root directory. Change the \"title\" property to \"Participants\".  {\n   deskpro : {\n     version :  2.1.0 ,\n     title :  Participants ,\n     isSingle : true,\n     scope :  agent ,\n     targets : [\n      {\n         target :  ticket-sidebar ,\n         url :  html/index.html \n      }\n    ]\n  }\n}  Explanation      The \"title\" value will be shown in the app toolbar. See the  manifest documentation  for more information.", 
            "title": "Step 2. Update the manifest"
        }, 
        {
            "location": "/pages/tutorials/basic/#step-3-modify-the-app-component", 
            "text": "Edit the app component at  src/main/javascript/App.jsx  to look like the following code.  // App.jsx\n\nimport React from 'react';\nimport { Container, Avatar } from 'deskpro-components';\n\nexport default class App extends React.Component {\n  render() {\n    const { tabData } = this.props;\n\n    return (\n       Container \n         ul className= participants-list \n          {tabData.participants.map((p) =  (\n             li key={p.person.id} \n               Avatar src={p.person.default_picture_url} / \n               div \n                {p.person.name}\n               /div \n               div \n                {p.person.primary_email.email}\n               /div \n             /li \n          ))}\n         /ul \n       /Container \n    );\n  }\n}  Explanation   The SDK automatically injects the  tabData  prop into the component. This prop is a plain object which contains information about the open ticket. The code above iterates over the  tabData.participants  array and displays an avatar for each person.", 
            "title": "Step 3. Modify the app component"
        }, 
        {
            "location": "/pages/tutorials/basic/#step-4-modify-the-app-styles", 
            "text": "The boilerplate includes a SASS stylesheet which can be found in  src/main/sass/index.scss . Modify the stylesheet to look like the following.  $dp-styles-font-path:  ~deskpro-components/src/styles/fonts/ ;\n@import  ~deskpro-components/src/styles/main.scss ;\n\n.participants-list {\n  list-style-type: none;\n\n  li {\n    margin-bottom: 1rem;\n  }\n}", 
            "title": "Step 4. Modify the app styles"
        }, 
        {
            "location": "/pages/tutorials/basic/#step-5-run-the-dev-server", 
            "text": "Make sure DeskPRO is running on your computer, and then from the app root directory run the following command.  npm run dev  The  dev  script builds your app and starts a development server which communicates with DeskPRO to install the app. Open  https://localhost/agent/?appstore.environment=development  when the the  dev  command finishes building to view the finished app.", 
            "title": "Step 5. Run the dev server"
        }, 
        {
            "location": "/pages/tutorials/form/", 
            "text": "Overview\n\n\nThis tutorial will walk you through creating a DeskPRO app which has two pages. One page with a settings form and one page which displays the form values. \nApp storage\n will be used to save the values, and the \nroute object\n will be used to switch between the two pages.\n\n\n\n\n\n\nTo follow this tutorial you will need:\n\n\n\n\nDeskPRO running on your computer\n\n\nNPM 6 or greater\n\n\nGit 1.9 or greater\n\n\nA IDE or text editor\n\n\n\n\n\n\nStep 1. Clone the boilerplate\n\n\nThe SDK boilerplate includes the basic app configuration and files to help developers get started writing apps.\n\n\ngit clone https://github.com/deskpro/deskproapps-boilerplate-react form-tutorial\ncd form-tutorial\nnpm install\n\n\n\n\nStep 2. Update the manifest\n\n\nEdit the app configuration in \npackage.json\n, which can be found in the app root directory. Change the \"title\" property to \"Form Tutorial\".\n\n\n{\n  \ndeskpro\n: {\n    \nversion\n: \n2.1.0\n,\n    \ntitle\n: \nForm Tutorial\n,\n    \nisSingle\n: true,\n    \nscope\n: \nagent\n,\n    \ntargets\n: [\n      {\n        \ntarget\n: \nticket-sidebar\n,\n        \nurl\n: \nhtml/index.html\n\n      }\n    ],\n    \nstorage\n: [\n      {\n        \nname\n: \nsettings\n,\n        \nisBackendOnly\n: false,\n        \npermRead\n: \nEVERYBODY\n,\n        \npermWrite\n: \nEVERYBODY\n\n      }\n    ]\n  }\n}\n\n\n\n\nExplanation\n  \n\n\n\n\nThe \"title\" value will be shown in the app toolbar. See the \nmanifest documentation\n for more information.\n\n\n\n\nStep 3. Create the settings page\n\n\nCreate a new component with a form at \nsrc/main/javascript/PageForm.jsx\n.\n\n\n// PageForm.jsx\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Container } from 'deskpro-components';\nimport { Form, Input, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageForm extends React.Component {\n  /**\n   * Changes to the index page after the form is submitted and\n   * the values have been written to app storage.\n   *\n   * @param {object} formValues\n   */\n  handleSubmit = (formValues) =\n {\n    this.props.route.to('index');\n  };\n\n  /**\n   * @returns {XML}\n   */\n  render() {\n    const { storage } = this.props;\n    const initialValues = (storage.app.settings || {});\n\n    return (\n      \nContainer\n\n        \nForm\n          name=\nsettings\n\n          initialValues={initialValues}\n          onSubmit={storage.onSubmitApp(this.handleSubmit)}\n        \n\n          \nInput\n            label=\nClient ID\n\n            id=\nclientId\n\n            name=\nclientId\n\n          /\n\n          \nInput\n            label=\nClient Secret\n\n            id=\nclientSecret\n\n            name=\nclientSecret\n\n          /\n\n          \nButton\n\n            Save\n          \n/Button\n\n        \n/Form\n\n      \n/Container\n\n    );\n  }\n}\n\nexport default sdkConnect(PageForm);\n\n\n\n\n\n\nExplanation\n\n\n\n\n\n\nThe form uses components from the \ndeskpro-components\n library, which is included in the boilerplate by default.\n\n\n\n\n\n\nThe \nthis.props.storage.onSubmitApp\n function is passed to the form \nonSubmit\n handler to automatically save the submitted form values to app storage. The function saves the form values to the DeskPRO database using the form \nname\n prop (\"settings\") as the storage key. See the \nstorage documentation\n for more information.\n\n\n\n\n\n\nThe \nthis.handleSubmit\n function is then called by \nthis.props.storage.onSubmitApp\n with the form values. The function switches to the index page using the SDK router. See the \nroute documentation\n for more information.\n\n\n\n\n\n\nThe form is initialized with the existing settings by passing \nthis.props.storage.app.settings\n to the \ninitialValues\n prop. This works because values written to app storage using the key \"settings\" can be read from storage via the prop \nthis.storage.app.settings\n.\n\n\n\n\n\n\nThe \nPageForm\n component is connected to the SDK using the \nsdkConnect\n function. Which is required in order to read and write to storage. See the documentation on \nconnecting components to the SDK\n for more information.\n\n\n\n\n\n\n\n\nNote\n\n\nThe code uses \n(storage.app.settings || {})\n to assign a default value because the settings will not exist the first time you run the app.\n\n\n\n\n\n\nNote\n\n\nThe callback passed to \nthis.props.storage.onSubmitApp\n is optional and may be omitted. Simply pass the function to the submit handler using \nonSubmit={this.props.storage.onSubmitApp}\n when post-processing of the form values is not required.\n\n\n\n\nStep 4. Create the index page\n\n\nCreate a new component to display the form values at \nsrc/main/javascript/PageIndex.jsx\n.\n\n\n// PageIndex.jsx\n\nimport React from 'react';\nimport { LinkButton, sdkConnect } from 'deskpro-sdk-react';\nimport { Container } from 'deskpro-components';\n\nclass PageIndex extends React.Component {\n  /**\n   * @returns {XML}\n   */\n  render() {\n    const { storage } = this.props;\n    const settings = storage.app.settings;\n\n    return (\n      \nContainer\n\n        \ndiv\n\n          \ndiv\n\n            Client ID: {settings.clientId}\n          \n/div\n\n          \ndiv\n\n            Client Secret: {settings.clientSecret}\n          \n/div\n\n        \n/div\n\n        \nLinkButton to=\nform\n\n          Edit\n        \n/LinkButton\n\n      \n/Container\n\n    );\n  }\n}\n\nexport default sdkConnect(PageIndex);\n\n\n\n\n\n\nExplanation\n\n\n\n\n\n\nThe settings were saved to app storage using the key \"settings\" which means they can be read from storage from \nthis.props.storage.app.settings\n. See the \nstorage documentation\n for more information.\n\n\n\n\n\n\nThe \nLinkButton\n component uses the SDK router to switch to the \"form\" page when clicked. See the \nroute documentation\n for more information.\n\n\n\n\n\n\nThe \nPageIndex\n component is connected to the SDK using the \nsdkConnect\n function. Which is required in order to read and write to storage. See the documentation on \nconnecting components to the SDK\n for more information.\n\n\n\n\n\n\nStep 5. Modify the app component\n\n\nEdit the app component at \nsrc/main/javascript/App.jsx\n to look like the following code.\n\n\n// App.jsx\n\nimport React from 'react';\nimport { Routes, Route } from 'deskpro-sdk-react';\nimport { Container } from 'deskpro-components';\nimport PageForm from './PageForm';\nimport PageIndex from './PageIndex';\n\nconst App = () =\n (\n  \nContainer\n\n    \nRoutes\n\n        \nRoute location=\nindex\n component={PageIndex} /\n\n        \nRoute location=\nform\n component={PageForm} /\n\n    \n/Routes\n\n  \n/Container\n\n);\n\nexport default App;\n\n\n\n\nExplanation\n\n\n\n\nThe \nRoutes\n components reads the \nthis.props.route.location\n value to render the \nRoute\n with the matching \nlocation\n prop. See the \nRoutes component documentation\n for more information.\n\n\n\n\n\n\nNote\n\n\nThe \nApp\n component is connected to the SDK automatically by the boilerplate, and does \nnot\n need to be wrapped with \nsdkConnect\n.\n\n\n\n\nStep 6. Run the dev server\n\n\nMake sure DeskPRO is running on your computer, and then from the app root directory run the following command.\n\n\nnpm run dev\n\n\n\n\nThe \ndev\n script builds your app and starts a development server which communicates with DeskPRO to install the app. Open \nhttps://localhost/agent/?appstore.environment=development\n when the the \ndev\n command finishes building to view the finished app.", 
            "title": "Form Handling"
        }, 
        {
            "location": "/pages/tutorials/form/#overview", 
            "text": "This tutorial will walk you through creating a DeskPRO app which has two pages. One page with a settings form and one page which displays the form values.  App storage  will be used to save the values, and the  route object  will be used to switch between the two pages.    To follow this tutorial you will need:   DeskPRO running on your computer  NPM 6 or greater  Git 1.9 or greater  A IDE or text editor", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/tutorials/form/#step-1-clone-the-boilerplate", 
            "text": "The SDK boilerplate includes the basic app configuration and files to help developers get started writing apps.  git clone https://github.com/deskpro/deskproapps-boilerplate-react form-tutorial\ncd form-tutorial\nnpm install", 
            "title": "Step 1. Clone the boilerplate"
        }, 
        {
            "location": "/pages/tutorials/form/#step-2-update-the-manifest", 
            "text": "Edit the app configuration in  package.json , which can be found in the app root directory. Change the \"title\" property to \"Form Tutorial\".  {\n   deskpro : {\n     version :  2.1.0 ,\n     title :  Form Tutorial ,\n     isSingle : true,\n     scope :  agent ,\n     targets : [\n      {\n         target :  ticket-sidebar ,\n         url :  html/index.html \n      }\n    ],\n     storage : [\n      {\n         name :  settings ,\n         isBackendOnly : false,\n         permRead :  EVERYBODY ,\n         permWrite :  EVERYBODY \n      }\n    ]\n  }\n}  Explanation      The \"title\" value will be shown in the app toolbar. See the  manifest documentation  for more information.", 
            "title": "Step 2. Update the manifest"
        }, 
        {
            "location": "/pages/tutorials/form/#step-3-create-the-settings-page", 
            "text": "Create a new component with a form at  src/main/javascript/PageForm.jsx .  // PageForm.jsx\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Container } from 'deskpro-components';\nimport { Form, Input, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageForm extends React.Component {\n  /**\n   * Changes to the index page after the form is submitted and\n   * the values have been written to app storage.\n   *\n   * @param {object} formValues\n   */\n  handleSubmit = (formValues) =  {\n    this.props.route.to('index');\n  };\n\n  /**\n   * @returns {XML}\n   */\n  render() {\n    const { storage } = this.props;\n    const initialValues = (storage.app.settings || {});\n\n    return (\n       Container \n         Form\n          name= settings \n          initialValues={initialValues}\n          onSubmit={storage.onSubmitApp(this.handleSubmit)}\n         \n           Input\n            label= Client ID \n            id= clientId \n            name= clientId \n          / \n           Input\n            label= Client Secret \n            id= clientSecret \n            name= clientSecret \n          / \n           Button \n            Save\n           /Button \n         /Form \n       /Container \n    );\n  }\n}\n\nexport default sdkConnect(PageForm);   Explanation    The form uses components from the  deskpro-components  library, which is included in the boilerplate by default.    The  this.props.storage.onSubmitApp  function is passed to the form  onSubmit  handler to automatically save the submitted form values to app storage. The function saves the form values to the DeskPRO database using the form  name  prop (\"settings\") as the storage key. See the  storage documentation  for more information.    The  this.handleSubmit  function is then called by  this.props.storage.onSubmitApp  with the form values. The function switches to the index page using the SDK router. See the  route documentation  for more information.    The form is initialized with the existing settings by passing  this.props.storage.app.settings  to the  initialValues  prop. This works because values written to app storage using the key \"settings\" can be read from storage via the prop  this.storage.app.settings .    The  PageForm  component is connected to the SDK using the  sdkConnect  function. Which is required in order to read and write to storage. See the documentation on  connecting components to the SDK  for more information.     Note  The code uses  (storage.app.settings || {})  to assign a default value because the settings will not exist the first time you run the app.    Note  The callback passed to  this.props.storage.onSubmitApp  is optional and may be omitted. Simply pass the function to the submit handler using  onSubmit={this.props.storage.onSubmitApp}  when post-processing of the form values is not required.", 
            "title": "Step 3. Create the settings page"
        }, 
        {
            "location": "/pages/tutorials/form/#step-4-create-the-index-page", 
            "text": "Create a new component to display the form values at  src/main/javascript/PageIndex.jsx .  // PageIndex.jsx\n\nimport React from 'react';\nimport { LinkButton, sdkConnect } from 'deskpro-sdk-react';\nimport { Container } from 'deskpro-components';\n\nclass PageIndex extends React.Component {\n  /**\n   * @returns {XML}\n   */\n  render() {\n    const { storage } = this.props;\n    const settings = storage.app.settings;\n\n    return (\n       Container \n         div \n           div \n            Client ID: {settings.clientId}\n           /div \n           div \n            Client Secret: {settings.clientSecret}\n           /div \n         /div \n         LinkButton to= form \n          Edit\n         /LinkButton \n       /Container \n    );\n  }\n}\n\nexport default sdkConnect(PageIndex);   Explanation    The settings were saved to app storage using the key \"settings\" which means they can be read from storage from  this.props.storage.app.settings . See the  storage documentation  for more information.    The  LinkButton  component uses the SDK router to switch to the \"form\" page when clicked. See the  route documentation  for more information.    The  PageIndex  component is connected to the SDK using the  sdkConnect  function. Which is required in order to read and write to storage. See the documentation on  connecting components to the SDK  for more information.", 
            "title": "Step 4. Create the index page"
        }, 
        {
            "location": "/pages/tutorials/form/#step-5-modify-the-app-component", 
            "text": "Edit the app component at  src/main/javascript/App.jsx  to look like the following code.  // App.jsx\n\nimport React from 'react';\nimport { Routes, Route } from 'deskpro-sdk-react';\nimport { Container } from 'deskpro-components';\nimport PageForm from './PageForm';\nimport PageIndex from './PageIndex';\n\nconst App = () =  (\n   Container \n     Routes \n         Route location= index  component={PageIndex} / \n         Route location= form  component={PageForm} / \n     /Routes \n   /Container \n);\n\nexport default App;  Explanation   The  Routes  components reads the  this.props.route.location  value to render the  Route  with the matching  location  prop. See the  Routes component documentation  for more information.    Note  The  App  component is connected to the SDK automatically by the boilerplate, and does  not  need to be wrapped with  sdkConnect .", 
            "title": "Step 5. Modify the app component"
        }, 
        {
            "location": "/pages/tutorials/form/#step-6-run-the-dev-server", 
            "text": "Make sure DeskPRO is running on your computer, and then from the app root directory run the following command.  npm run dev  The  dev  script builds your app and starts a development server which communicates with DeskPRO to install the app. Open  https://localhost/agent/?appstore.environment=development  when the the  dev  command finishes building to view the finished app.", 
            "title": "Step 6. Run the dev server"
        }, 
        {
            "location": "/pages/tutorials/oauth/", 
            "text": "Overview\n\n\nThis tutorial will walk you through creating a DeskPRO app which uses oauth to authenticate with a remote service provider. This tutorial will use \nGitHub\n as an example.\n\n\nOAuth review\n\n\nBefore starting the tutorial let's go over designing DeskPRO apps to use the oauth work flow.\n\n\nSettings\n\n\nDeskPRO admins must configure the app for oauth on the first run. Configuration is handled by showing the admin a form which has a \"Authorization callback URL\" value and inputs to enter a client ID and client secret.\n\n\n\nRegistration\n\n\nThe admin is instructed to visit their \nGitHub account settings\n in order to register the app. The admin will provide the \"Authorization callback URL\" to the registration form.\n\n\n\nCredentials\n\n\nOn the next page the admin will be given a client ID and client secret.\n\n\n\nThe admin comes back to the app settings form where they enter and save the client ID and client secret. This concludes configuring the app for oauth, and the admin may close the window.\n\n\n\nAuthorization\n\n\nNow when an agent opens the app they will be prompted to authenticate with GitHub.\n\n\n\nSuccess\n\n\nUpon successful authentication the agent will be shown the index page.\n\n\n\n\n\nTo follow this tutorial you will need:\n\n\n\n\nA \nGitHub\n account\n\n\nDeskPRO running on your computer\n\n\nNPM 6 or greater\n\n\nGit 1.9 or greater\n\n\nA IDE or text editor\n\n\n\n\n\n\nStep 1. Clone the boilerplate\n\n\nThe SDK boilerplate includes the basic app configuration and files to help developers get started writing apps.\n\n\ngit clone https://github.com/deskpro/deskproapps-boilerplate-react oauth-tutorial\ncd oauth-tutorial\nnpm install\n\n\n\n\nStep 2. Configure the manifest\n\n\nEdit the app configuration in \npackage.json\n, which can be found in the app root directory. Change the \"title\" property to \"OAuth Tutorial\". Also add the \"storage\" values shown below.\n\n\ndeskpro\n: {\n  \nversion\n: \n2.1.0\n,\n  \ntitle\n: \nOAuth Tutorial\n,\n  \nisSingle\n: true,\n  \nscope\n: \nagent\n,\n  \nstorage\n: [\n    {\n      \nname\n: \noauth:github\n,\n      \nisBackendOnly\n: true,\n      \npermRead\n: \nEVERYBODY\n,\n      \npermWrite\n: \nOWNER\n\n    },\n    {\n      \nname\n: \nsettings\n,\n      \nisBackendOnly\n: false,\n      \npermRead\n: \nEVERYBODY\n,\n      \npermWrite\n: \nOWNER\n\n    },\n    {\n      \nname\n: \nuser_settings\n,\n      \nisBackendOnly\n: false,\n      \npermRead\n: \nOWNER\n,\n      \npermWrite\n: \nOWNER\n\n    }\n  ]\n}\n\n\n\n\nExplanation\n\n@todo\n\n\nStep 3. Create a settings page\n\n\nCreate a new component with a form at \nsrc/main/javascript/PageSettings.jsx\n.\n\n\n// PageSettings.jsx\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Form, Input, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageSettings extends React.PureComponent {\n  /**\n   * Called when the form is submitted\n   */\n  handleSubmit = (settings) =\n {\n    const { oauth, route } = this.props;\n\n    // Create a \nconnection\n object using the submitted values, plus\n    // the values for urlAccessToken and urlAuthorize. Then register\n    // the connection with the oauth module and redirect to the\n    // index page.\n    const connection = Object.assign({}, settings, {\n      urlAccessToken: 'https://github.com/login/oauth/access_token',\n      urlAuthorize:   'https://github.com/login/oauth/authorize'\n    });\n    oauth.register('github', connection);\n    route.to('index');\n  };\n\n  /**\n   * @returns {XML}\n   */\n  render() {\n    const { oauth, storage } = this.props;\n\n    return (\n      \nForm\n        name=\nsettings\n\n        initialValues={storage.app.settings}\n        onSubmit={storage.onSubmitApp(this.handleSubmit)}\n        \n\n        \np\n\n          You must register this app with GitHub before using it.\n          Fill out the app registration form and when you come to\n          the \nAuthorization callback URL\n field enter the following\n          value:\n        \n/p\n\n        \ncode\n\n          {oauth.providers.github.urlRedirect}\n        \n/code\n\n        \nInput\n          label=\nClient ID\n\n          id=\nclientId\n\n          name=\nclientId\n\n        /\n\n        \nInput\n          label=\nClient Secret\n\n          id=\nclientSecret\n\n          name=\nclientSecret\n\n        /\n\n        \nButton\n\n          Save\n        \n/Button\n\n      \n/Form\n\n    );\n  }\n}\n\nexport default sdkConnect(PageSettings);\n\n\n\n\n\n\nExplanation\n\n@todo\n\n\nStep 4. Create an index page\n\n\nCreate a new component to display the oauth access token at \nsrc/main/javascript/PageIndex.jsx\n.\n\n\n// PageIndex.jsx\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\n\nclass PageIndex extends React.Component {\n  /**\n   * @returns {XML}\n   */\n  render() {\n    const { storage } = this.props;\n\n    return (\n      \ndiv\n\n        \np\n\n          {storage.app.user_settings ? (\n            \np\n\n              Thanks for authenticating!\n              Your access token is:\n              {storage.app.user_settings.accessToken}\n            \n/p\n\n          ) : (\n            \np\n\n              Oop! Looks like authentication failed!\n            \n/p\n\n          )}\n        \n/p\n\n      \n/div\n\n    );\n  }\n}\n\nexport default sdkConnect(PageIndex);\n\n\n\n\n\n\n\n\nExplanation\n\n@todo\n\n\nStep 5. Modify the app component\n\n\nEdit the app component at \nsrc/main/javascript/App.jsx\n to look like the following code.\n\n\n// App.jsx\n\nimport React from 'react';\nimport PageSettings from './PageSettings';\nimport PageIndex from './PageIndex';\n\nexport default class App extends React.Component {\n  /**\n   * Invoked immediately after a component is mounted\n   */\n  componentDidMount() {\n    const { oauth, storage, route, ui } = this.props;\n\n    // The app settings will be empty the first time the app is run.\n    // Route to the settings page so the admin can setup oauth creds.\n    if (!storage.app.settings) {\n      return route.to('settings');\n    }\n\n    // Route to the index page if the user already has an access token.\n    if (storage.app.user_settings.accessToken) {\n      return route.to('index');\n    }\n\n    // Otherwise obtain the access token using oauth.\n    oauth.access('github')\n      // Save the access token and redirect to the index page.\n      .then((resp) =\n {\n        const user_settings = {\n            accessToken: resp.accessToken\n        };\n        storage.setApp({ user_settings });\n        return route.to('index');\n      })\n      // Send any errors directly to the UI to be displayed.\n      .catch(ui.error);\n  }\n\n  /**\n   * @returns {XML}\n   */\n  render() {\n    return (\n      \nRoutes\n\n        \nRoute location=\nsettings\n component={PageSettings} /\n\n        \nRoute location=\nindex\n component={PageIndex} /\n\n      \n/Routes\n\n    );\n  }\n}\n\n\n\n\n\n\nExplanation\n\n@todo\n\n\nStep 6. Run the dev server\n\n\nMake sure DeskPRO is running on your computer, and then from the app root directory run the following command.\n\n\nnpm run dev\n\n\n\n\nThe \ndev\n script builds your app and starts a development server which communicates with DeskPRO to install the app. Open \nhttps://localhost/agent/?appstore.environment=development\n when the the \ndev\n command finishes building to view the finished app.", 
            "title": "Using OAuth"
        }, 
        {
            "location": "/pages/tutorials/oauth/#overview", 
            "text": "This tutorial will walk you through creating a DeskPRO app which uses oauth to authenticate with a remote service provider. This tutorial will use  GitHub  as an example.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/tutorials/oauth/#oauth-review", 
            "text": "Before starting the tutorial let's go over designing DeskPRO apps to use the oauth work flow.", 
            "title": "OAuth review"
        }, 
        {
            "location": "/pages/tutorials/oauth/#settings", 
            "text": "DeskPRO admins must configure the app for oauth on the first run. Configuration is handled by showing the admin a form which has a \"Authorization callback URL\" value and inputs to enter a client ID and client secret.", 
            "title": "Settings"
        }, 
        {
            "location": "/pages/tutorials/oauth/#registration", 
            "text": "The admin is instructed to visit their  GitHub account settings  in order to register the app. The admin will provide the \"Authorization callback URL\" to the registration form.", 
            "title": "Registration"
        }, 
        {
            "location": "/pages/tutorials/oauth/#credentials", 
            "text": "On the next page the admin will be given a client ID and client secret.  The admin comes back to the app settings form where they enter and save the client ID and client secret. This concludes configuring the app for oauth, and the admin may close the window.", 
            "title": "Credentials"
        }, 
        {
            "location": "/pages/tutorials/oauth/#authorization", 
            "text": "Now when an agent opens the app they will be prompted to authenticate with GitHub.", 
            "title": "Authorization"
        }, 
        {
            "location": "/pages/tutorials/oauth/#success", 
            "text": "Upon successful authentication the agent will be shown the index page.   To follow this tutorial you will need:   A  GitHub  account  DeskPRO running on your computer  NPM 6 or greater  Git 1.9 or greater  A IDE or text editor", 
            "title": "Success"
        }, 
        {
            "location": "/pages/tutorials/oauth/#step-1-clone-the-boilerplate", 
            "text": "The SDK boilerplate includes the basic app configuration and files to help developers get started writing apps.  git clone https://github.com/deskpro/deskproapps-boilerplate-react oauth-tutorial\ncd oauth-tutorial\nnpm install", 
            "title": "Step 1. Clone the boilerplate"
        }, 
        {
            "location": "/pages/tutorials/oauth/#step-2-configure-the-manifest", 
            "text": "Edit the app configuration in  package.json , which can be found in the app root directory. Change the \"title\" property to \"OAuth Tutorial\". Also add the \"storage\" values shown below.  deskpro : {\n   version :  2.1.0 ,\n   title :  OAuth Tutorial ,\n   isSingle : true,\n   scope :  agent ,\n   storage : [\n    {\n       name :  oauth:github ,\n       isBackendOnly : true,\n       permRead :  EVERYBODY ,\n       permWrite :  OWNER \n    },\n    {\n       name :  settings ,\n       isBackendOnly : false,\n       permRead :  EVERYBODY ,\n       permWrite :  OWNER \n    },\n    {\n       name :  user_settings ,\n       isBackendOnly : false,\n       permRead :  OWNER ,\n       permWrite :  OWNER \n    }\n  ]\n}  Explanation \n@todo", 
            "title": "Step 2. Configure the manifest"
        }, 
        {
            "location": "/pages/tutorials/oauth/#step-3-create-a-settings-page", 
            "text": "Create a new component with a form at  src/main/javascript/PageSettings.jsx .  // PageSettings.jsx\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Form, Input, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageSettings extends React.PureComponent {\n  /**\n   * Called when the form is submitted\n   */\n  handleSubmit = (settings) =  {\n    const { oauth, route } = this.props;\n\n    // Create a  connection  object using the submitted values, plus\n    // the values for urlAccessToken and urlAuthorize. Then register\n    // the connection with the oauth module and redirect to the\n    // index page.\n    const connection = Object.assign({}, settings, {\n      urlAccessToken: 'https://github.com/login/oauth/access_token',\n      urlAuthorize:   'https://github.com/login/oauth/authorize'\n    });\n    oauth.register('github', connection);\n    route.to('index');\n  };\n\n  /**\n   * @returns {XML}\n   */\n  render() {\n    const { oauth, storage } = this.props;\n\n    return (\n       Form\n        name= settings \n        initialValues={storage.app.settings}\n        onSubmit={storage.onSubmitApp(this.handleSubmit)}\n         \n         p \n          You must register this app with GitHub before using it.\n          Fill out the app registration form and when you come to\n          the  Authorization callback URL  field enter the following\n          value:\n         /p \n         code \n          {oauth.providers.github.urlRedirect}\n         /code \n         Input\n          label= Client ID \n          id= clientId \n          name= clientId \n        / \n         Input\n          label= Client Secret \n          id= clientSecret \n          name= clientSecret \n        / \n         Button \n          Save\n         /Button \n       /Form \n    );\n  }\n}\n\nexport default sdkConnect(PageSettings);   Explanation \n@todo", 
            "title": "Step 3. Create a settings page"
        }, 
        {
            "location": "/pages/tutorials/oauth/#step-4-create-an-index-page", 
            "text": "Create a new component to display the oauth access token at  src/main/javascript/PageIndex.jsx .  // PageIndex.jsx\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\n\nclass PageIndex extends React.Component {\n  /**\n   * @returns {XML}\n   */\n  render() {\n    const { storage } = this.props;\n\n    return (\n       div \n         p \n          {storage.app.user_settings ? (\n             p \n              Thanks for authenticating!\n              Your access token is:\n              {storage.app.user_settings.accessToken}\n             /p \n          ) : (\n             p \n              Oop! Looks like authentication failed!\n             /p \n          )}\n         /p \n       /div \n    );\n  }\n}\n\nexport default sdkConnect(PageIndex);    Explanation \n@todo", 
            "title": "Step 4. Create an index page"
        }, 
        {
            "location": "/pages/tutorials/oauth/#step-5-modify-the-app-component", 
            "text": "Edit the app component at  src/main/javascript/App.jsx  to look like the following code.  // App.jsx\n\nimport React from 'react';\nimport PageSettings from './PageSettings';\nimport PageIndex from './PageIndex';\n\nexport default class App extends React.Component {\n  /**\n   * Invoked immediately after a component is mounted\n   */\n  componentDidMount() {\n    const { oauth, storage, route, ui } = this.props;\n\n    // The app settings will be empty the first time the app is run.\n    // Route to the settings page so the admin can setup oauth creds.\n    if (!storage.app.settings) {\n      return route.to('settings');\n    }\n\n    // Route to the index page if the user already has an access token.\n    if (storage.app.user_settings.accessToken) {\n      return route.to('index');\n    }\n\n    // Otherwise obtain the access token using oauth.\n    oauth.access('github')\n      // Save the access token and redirect to the index page.\n      .then((resp) =  {\n        const user_settings = {\n            accessToken: resp.accessToken\n        };\n        storage.setApp({ user_settings });\n        return route.to('index');\n      })\n      // Send any errors directly to the UI to be displayed.\n      .catch(ui.error);\n  }\n\n  /**\n   * @returns {XML}\n   */\n  render() {\n    return (\n       Routes \n         Route location= settings  component={PageSettings} / \n         Route location= index  component={PageIndex} / \n       /Routes \n    );\n  }\n}   Explanation \n@todo", 
            "title": "Step 5. Modify the app component"
        }, 
        {
            "location": "/pages/tutorials/oauth/#step-6-run-the-dev-server", 
            "text": "Make sure DeskPRO is running on your computer, and then from the app root directory run the following command.  npm run dev  The  dev  script builds your app and starts a development server which communicates with DeskPRO to install the app. Open  https://localhost/agent/?appstore.environment=development  when the the  dev  command finishes building to view the finished app.", 
            "title": "Step 6. Run the dev server"
        }, 
        {
            "location": "/pages/tutorials/redux/", 
            "text": "Overview\n\n\nRedux\n is used internally by the SDK to manage state. Its usage has been hidden away to make the SDK user friendly, but it may be used by developers in need of a centralized store.\n\n\nConfiguring\n\n\nThe SDK store is created by the \nconfigureStore()\n function, and the store object must be passed to the \nDeskproSDK\n component via the \nstore\n prop.\n\n\nimport ReactDOM from 'react-dom';\nimport { DeskproSDK, configureStore } from 'deskpro-sdk-react';\n\nconst store = configureStore(dpapp);\n\nexport function runApp(dpapp) {\n  ReactDOM.render(\n    \nDeskproSDK dpapp={dpapp} store={store}\n\n      \nApp /\n\n    \n/DeskproSDK\n,\n    document.getElementById('deskpro-app')\n  );\n}\n\n\n\n\nMiddleware\n\n\nThe store may be configured with additional middleware by passing an array of functions as the second argument to \nconfigureStore()\n.\n\n\nimport { configureStore } from 'deskpro-sdk-react';\nimport logger from 'redux-logger';\nimport analytics from 'redux-analytics';\n\nconst store = configureStore(dpapp, [logger, analytics]);\n\n\n\n\n\n\nNote\n\n\nThunk\n middleware is included by default.\n\n\n\n\nReducers\n\n\nAdditional reducers may also be passed to the \nconfigureStore()\n function.\n\n\nimport { configureStore } from 'deskpro-sdk-react';\n\nconst customReducer = (state, action) =\n {\n    return state;\n}\nconst store = configureStore(dpapp, {\n    custom: customReducer\n});\n\n\n\n\n\n\nNote\n\n\nThe \nRedux Form\n reducer is included by default.\n\n\n\n\nInitial state for the custom reducers may also be passed to the \nconfigureStore()\n function.\n\n\nimport { configureStore } from 'deskpro-sdk-react';\n\nconst customReducer = (state, action) =\n {\n    return state;\n}\nconst reducers = {\n    custom: customReducer\n}\nconst initialState = {\n    custom: { foo: 'bar' }\n}\nconst store = configureStore(dpapp, reducers, initialState);\n\n\n\n\nThe following example uses middleware, reducers, and initial state.\n\n\nimport ReactDOM from 'react-dom';\nimport { DeskproSDK, configureStore } from 'deskpro-sdk-react';\nimport logger from 'redux-logger';\nimport analytics from 'redux-analytics';\n\nconst customReducer = (state, action) =\n {\n    return state;\n}\nconst reducers = {\n    custom: customReducer\n}\nconst initialState = {\n    custom: { foo: 'bar' }\n}\nconst store = configureStore(dpapp, [logger, analytics], reducers, initialState);\n\nexport function runApp(dpapp) {\n  ReactDOM.render(\n    \nDeskproSDK dpapp={dpapp} store={store}\n\n      \nApp /\n\n    \n/DeskproSDK\n,\n    document.getElementById('deskpro-app')\n  );\n}\n\n\n\n\nDispatch\n\n\nComponents which have been \nconnected to the SDK\n will have the redux \ndispatch\n function passed to their props.\n\n\nimport React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Container } from 'deskpro-components';\nimport { Form, Input, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageSettings extends React.Component {\n  /**\n   * Dispatches the APP_SETTINGS_CHANGED action after the form has\n   * been submitted.\n   */\n  handleSubmit = (settings) =\n {\n    this.props.dispatch({\n        type: 'APP_SETTINGS_CHANGED',\n        settings\n    });\n  };\n\n  /**\n   * @returns {XML}\n   */\n  render() {\n    return (\n      \nContainer\n\n        \nForm name=\nsettings\n onSubmit={this.handleSubmit}\n\n          \nInput\n            label=\nClient ID\n\n            id=\nclientId\n\n            name=\nclientId\n\n          /\n\n          \nButton\n\n            Save\n          \n/Button\n\n        \n/Form\n\n      \n/Container\n\n    );\n  }\n}\n\nexport default sdkConnect(PageSettings);\n\n\n\n\nDebugging\n\n\nThe SDK automatically enables support for the \nRedux DevTools Extension\n when running in the \"development\" environment. The extension allows developers to view, modify, and playback the redux state. It runs in Chrome, Firefox, and other browsers.", 
            "title": "Using Redux"
        }, 
        {
            "location": "/pages/tutorials/redux/#overview", 
            "text": "Redux  is used internally by the SDK to manage state. Its usage has been hidden away to make the SDK user friendly, but it may be used by developers in need of a centralized store.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/tutorials/redux/#configuring", 
            "text": "The SDK store is created by the  configureStore()  function, and the store object must be passed to the  DeskproSDK  component via the  store  prop.  import ReactDOM from 'react-dom';\nimport { DeskproSDK, configureStore } from 'deskpro-sdk-react';\n\nconst store = configureStore(dpapp);\n\nexport function runApp(dpapp) {\n  ReactDOM.render(\n     DeskproSDK dpapp={dpapp} store={store} \n       App / \n     /DeskproSDK ,\n    document.getElementById('deskpro-app')\n  );\n}", 
            "title": "Configuring"
        }, 
        {
            "location": "/pages/tutorials/redux/#middleware", 
            "text": "The store may be configured with additional middleware by passing an array of functions as the second argument to  configureStore() .  import { configureStore } from 'deskpro-sdk-react';\nimport logger from 'redux-logger';\nimport analytics from 'redux-analytics';\n\nconst store = configureStore(dpapp, [logger, analytics]);   Note  Thunk  middleware is included by default.", 
            "title": "Middleware"
        }, 
        {
            "location": "/pages/tutorials/redux/#reducers", 
            "text": "Additional reducers may also be passed to the  configureStore()  function.  import { configureStore } from 'deskpro-sdk-react';\n\nconst customReducer = (state, action) =  {\n    return state;\n}\nconst store = configureStore(dpapp, {\n    custom: customReducer\n});   Note  The  Redux Form  reducer is included by default.   Initial state for the custom reducers may also be passed to the  configureStore()  function.  import { configureStore } from 'deskpro-sdk-react';\n\nconst customReducer = (state, action) =  {\n    return state;\n}\nconst reducers = {\n    custom: customReducer\n}\nconst initialState = {\n    custom: { foo: 'bar' }\n}\nconst store = configureStore(dpapp, reducers, initialState);  The following example uses middleware, reducers, and initial state.  import ReactDOM from 'react-dom';\nimport { DeskproSDK, configureStore } from 'deskpro-sdk-react';\nimport logger from 'redux-logger';\nimport analytics from 'redux-analytics';\n\nconst customReducer = (state, action) =  {\n    return state;\n}\nconst reducers = {\n    custom: customReducer\n}\nconst initialState = {\n    custom: { foo: 'bar' }\n}\nconst store = configureStore(dpapp, [logger, analytics], reducers, initialState);\n\nexport function runApp(dpapp) {\n  ReactDOM.render(\n     DeskproSDK dpapp={dpapp} store={store} \n       App / \n     /DeskproSDK ,\n    document.getElementById('deskpro-app')\n  );\n}", 
            "title": "Reducers"
        }, 
        {
            "location": "/pages/tutorials/redux/#dispatch", 
            "text": "Components which have been  connected to the SDK  will have the redux  dispatch  function passed to their props.  import React from 'react';\nimport { sdkConnect } from 'deskpro-sdk-react';\nimport { Container } from 'deskpro-components';\nimport { Form, Input, Button } from 'deskpro-components/lib/bindings/redux-form';\n\nclass PageSettings extends React.Component {\n  /**\n   * Dispatches the APP_SETTINGS_CHANGED action after the form has\n   * been submitted.\n   */\n  handleSubmit = (settings) =  {\n    this.props.dispatch({\n        type: 'APP_SETTINGS_CHANGED',\n        settings\n    });\n  };\n\n  /**\n   * @returns {XML}\n   */\n  render() {\n    return (\n       Container \n         Form name= settings  onSubmit={this.handleSubmit} \n           Input\n            label= Client ID \n            id= clientId \n            name= clientId \n          / \n           Button \n            Save\n           /Button \n         /Form \n       /Container \n    );\n  }\n}\n\nexport default sdkConnect(PageSettings);", 
            "title": "Dispatch"
        }, 
        {
            "location": "/pages/tutorials/redux/#debugging", 
            "text": "The SDK automatically enables support for the  Redux DevTools Extension  when running in the \"development\" environment. The extension allows developers to view, modify, and playback the redux state. It runs in Chrome, Firefox, and other browsers.", 
            "title": "Debugging"
        }
    ]
}